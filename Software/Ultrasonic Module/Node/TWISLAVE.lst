   1               		.file	"TWISLAVE.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	init_twi_slave
  12               	init_twi_slave:
  13               	.LFB0:
  14               		.file 1 "TWISLAVE.c"
   1:TWISLAVE.c    **** // Codesource: http://rn-wissen.de/wiki/index.php/TWI_Slave_mit_avr-gcc
   2:TWISLAVE.c    **** 
   3:TWISLAVE.c    **** #include <util/twi.h> 	    //enthält z.B. die Bezeichnungen für die Statuscodes in TWSR
   4:TWISLAVE.c    **** #include <avr/interrupt.h>  //dient zur Behandlung der Interrupts
   5:TWISLAVE.c    **** #include <stdint.h>         //definiert den Datentyp uint8_t       
   6:TWISLAVE.c    **** #include "TWISLAVE.h"
   7:TWISLAVE.c    **** 
   8:TWISLAVE.c    **** //%%%%%%%% Globale Variablen, die vom Hauptprogramm genutzt werden %%%%%%%%
   9:TWISLAVE.c    **** /*Der Buffer, in dem die Daten gespeichert werden. 
  10:TWISLAVE.c    **** Aus Sicht des Masters läuft der Zugrif auf den Buffer genau wie bei einem I2C-EEPROm ab.
  11:TWISLAVE.c    **** Für den Slave ist es eine globale Variable
  12:TWISLAVE.c    **** */
  13:TWISLAVE.c    **** volatile uint8_t buffer_adr; //"Adressregister" für den Buffer
  14:TWISLAVE.c    **** 
  15:TWISLAVE.c    **** /*Initaliserung des TWI-Inteface. Muss zu Beginn aufgerufen werden, sowie bei einem Wechsel der Sla
  16:TWISLAVE.c    **** Parameter adr: gewünschte Slave-Adresse
  17:TWISLAVE.c    **** */
  18:TWISLAVE.c    **** void init_twi_slave(uint8_t adr)
  19:TWISLAVE.c    **** {
  15               		.loc 1 19 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  20:TWISLAVE.c    ****         TWAR= adr; //Adresse setzen
  22               		.loc 1 20 0
  23 0000 82B9      		out 0x2,r24
  21:TWISLAVE.c    **** 	TWCR &= ~(1<<TWSTA)|(1<<TWSTO);
  24               		.loc 1 21 0
  25 0002 86B7      		in r24,0x36
  26               	.LVL1:
  27 0004 8F7D      		andi r24,lo8(-33)
  28 0006 86BF      		out 0x36,r24
  29               	.LVL2:
  22:TWISLAVE.c    **** 	TWCR|= (1<<TWEA) | (1<<TWEN)|(1<<TWIE); 	
  30               		.loc 1 22 0
  31 0008 86B7      		in r24,0x36
  32 000a 8564      		ori r24,lo8(69)
  33 000c 86BF      		out 0x36,r24
  23:TWISLAVE.c    **** 	buffer_adr=0xFF;  
  34               		.loc 1 23 0
  35 000e 8FEF      		ldi r24,lo8(-1)
  36 0010 8093 0000 		sts buffer_adr,r24
  24:TWISLAVE.c    **** 	sei();
  37               		.loc 1 24 0
  38               	/* #APP */
  39               	 ;  24 "TWISLAVE.c" 1
  40 0014 7894      		sei
  41               	 ;  0 "" 2
  42               	/* #NOAPP */
  43 0016 0895      		ret
  44               		.cfi_endproc
  45               	.LFE0:
  47               	.global	__vector_17
  49               	__vector_17:
  50               	.LFB1:
  25:TWISLAVE.c    **** }
  26:TWISLAVE.c    **** 
  27:TWISLAVE.c    **** 
  28:TWISLAVE.c    **** //Je nach Statuscode in TWSR müssen verschiedene Bitmuster in TWCR geschreiben werden(siehe Tabell
  29:TWISLAVE.c    **** //Makros für die verwendeten Bitmuster:
  30:TWISLAVE.c    **** 
  31:TWISLAVE.c    **** //ACK nach empfangenen Daten senden/ ACK nach gesendeten Daten erwarten
  32:TWISLAVE.c    **** #define TWCR_ACK TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|(0<<TWWC);  
  33:TWISLAVE.c    **** 
  34:TWISLAVE.c    **** //NACK nach empfangenen Daten senden/ NACK nach gesendeten Daten erwarten     
  35:TWISLAVE.c    **** #define TWCR_NACK TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|(0<<TWWC);
  36:TWISLAVE.c    **** 
  37:TWISLAVE.c    **** //switch to the non adressed slave mode...
  38:TWISLAVE.c    **** #define TWCR_RESET TWCR = (1<<TWEN)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|(0<<TWWC);
  39:TWISLAVE.c    **** 
  40:TWISLAVE.c    **** 
  41:TWISLAVE.c    **** /*ISR, die bei einem Ereignis auf dem Bus ausgelöst wird. Im Register TWSR befindet sich dann 
  42:TWISLAVE.c    **** ein Statuscode, anhand dessen die Situation festgestellt werden kann.
  43:TWISLAVE.c    **** */
  44:TWISLAVE.c    **** ISR (TWI_vect)  
  45:TWISLAVE.c    **** {
  51               		.loc 1 45 0
  52               		.cfi_startproc
  53 0018 1F92      		push r1
  54               	.LCFI0:
  55               		.cfi_def_cfa_offset 3
  56               		.cfi_offset 1, -2
  57 001a 0F92      		push r0
  58               	.LCFI1:
  59               		.cfi_def_cfa_offset 4
  60               		.cfi_offset 0, -3
  61 001c 0FB6      		in r0,__SREG__
  62 001e 0F92      		push r0
  63 0020 1124      		clr __zero_reg__
  64 0022 8F93      		push r24
  65               	.LCFI2:
  66               		.cfi_def_cfa_offset 5
  67               		.cfi_offset 24, -4
  68 0024 9F93      		push r25
  69               	.LCFI3:
  70               		.cfi_def_cfa_offset 6
  71               		.cfi_offset 25, -5
  72 0026 EF93      		push r30
  73               	.LCFI4:
  74               		.cfi_def_cfa_offset 7
  75               		.cfi_offset 30, -6
  76 0028 FF93      		push r31
  77               	.LCFI5:
  78               		.cfi_def_cfa_offset 8
  79               		.cfi_offset 31, -7
  80               	/* prologue: Signal */
  81               	/* frame size = 0 */
  82               	/* stack size = 7 */
  83               	.L__stack_usage = 7
  84               	.LVL3:
  46:TWISLAVE.c    **** uint8_t data=0;
  47:TWISLAVE.c    **** 
  48:TWISLAVE.c    **** switch (TW_STATUS) //TWI-Statusregister prüfen und nötige Aktion bestimmen 
  85               		.loc 1 48 0
  86 002a 81B1      		in r24,0x1
  87 002c 887F      		andi r24,lo8(-8)
  88 002e 803A      		cpi r24,lo8(-96)
  89 0030 01F0      		breq .L4
  90 0032 00F4      		brsh .L5
  91 0034 8036      		cpi r24,lo8(96)
  92 0036 01F0      		breq .L6
  93 0038 8038      		cpi r24,lo8(-128)
  94 003a 01F0      		breq .L7
  95 003c 00C0      		rjmp .L3
  96               	.L5:
  97 003e 883A      		cpi r24,lo8(-88)
  98 0040 01F0      		breq .L8
  99 0042 883B      		cpi r24,lo8(-72)
 100 0044 01F0      		breq .L8
 101 0046 00C0      		rjmp .L3
 102               	.L6:
  49:TWISLAVE.c    **** {
  50:TWISLAVE.c    **** 
  51:TWISLAVE.c    **** // Slave Receiver 
  52:TWISLAVE.c    **** 
  53:TWISLAVE.c    **** case TW_SR_SLA_ACK: // 0x60 Slave Receiver, Slave wurde adressiert	
  54:TWISLAVE.c    **** 	TWCR_ACK; // nächstes Datenbyte empfangen, ACK danach senden
 103               		.loc 1 54 0
 104 0048 85EC      		ldi r24,lo8(-59)
 105 004a 86BF      		out 0x36,r24
  55:TWISLAVE.c    **** 	buffer_adr=0xFF; //Bufferposition ist undefiniert
 106               		.loc 1 55 0
 107 004c 8FEF      		ldi r24,lo8(-1)
 108 004e 8093 0000 		sts buffer_adr,r24
  56:TWISLAVE.c    **** break;
 109               		.loc 1 56 0
 110 0052 00C0      		rjmp .L2
 111               	.L7:
  57:TWISLAVE.c    **** 	
  58:TWISLAVE.c    **** case TW_SR_DATA_ACK: // 0x80 Slave Receiver, ein Datenbyte wurde empfangen
  59:TWISLAVE.c    **** 	data=TWDR; //Empfangene Daten auslesen
 112               		.loc 1 59 0
 113 0054 83B1      		in r24,0x3
 114               	.LVL4:
  60:TWISLAVE.c    **** 	if (buffer_adr == 0xFF) //erster Zugriff, Bufferposition setzen
 115               		.loc 1 60 0
 116 0056 9091 0000 		lds r25,buffer_adr
 117 005a 9F3F      		cpi r25,lo8(-1)
 118 005c 01F4      		brne .L10
  61:TWISLAVE.c    **** 		{
  62:TWISLAVE.c    **** 			//Kontrolle ob gewünschte Adresse im erlaubten bereich
  63:TWISLAVE.c    **** 			if(data<i2c_buffer_size+1)
 119               		.loc 1 63 0
 120 005e 8A31      		cpi r24,lo8(26)
 121 0060 00F0      		brlo .L25
  64:TWISLAVE.c    **** 				{
  65:TWISLAVE.c    **** 					buffer_adr= data; //Bufferposition wie adressiert setzen
  66:TWISLAVE.c    **** 				}
  67:TWISLAVE.c    **** 			else
  68:TWISLAVE.c    **** 				{
  69:TWISLAVE.c    **** 					buffer_adr=0; //Adresse auf Null setzen. Ist das sinnvoll? TO DO!
 122               		.loc 1 69 0
 123 0062 1092 0000 		sts buffer_adr,__zero_reg__
 124 0066 00C0      		rjmp .L4
 125               	.L10:
  70:TWISLAVE.c    **** 				}				
  71:TWISLAVE.c    **** 			TWCR_ACK;	// nächstes Datenbyte empfangen, ACK danach, um nächstes Byte anzufordern
  72:TWISLAVE.c    **** 		}
  73:TWISLAVE.c    **** 	else //weiterer Zugriff, nachdem die Position im Buffer gesetzt wurde. NUn die Daten empfangen und
  74:TWISLAVE.c    **** 		{
  75:TWISLAVE.c    **** 		
  76:TWISLAVE.c    **** 			if(buffer_adr<i2c_buffer_size+1)
 126               		.loc 1 76 0
 127 0068 9091 0000 		lds r25,buffer_adr
 128 006c 9A31      		cpi r25,lo8(26)
 129 006e 00F4      		brsh .L24
  77:TWISLAVE.c    **** 				{
  78:TWISLAVE.c    **** 						i2cdata[buffer_adr]=data; //Daten in Buffer schreibe	
 130               		.loc 1 78 0
 131 0070 E091 0000 		lds r30,buffer_adr
 132 0074 F0E0      		ldi r31,0
 133 0076 E050      		subi r30,lo8(-(i2cdata))
 134 0078 F040      		sbci r31,hi8(-(i2cdata))
 135 007a 8083      		st Z,r24
 136 007c 00C0      		rjmp .L24
 137               	.LVL5:
 138               	.L8:
  79:TWISLAVE.c    **** 				}
  80:TWISLAVE.c    **** 			buffer_adr++; //Buffer-Adresse weiterzählen für nächsten Schreibzugriff
  81:TWISLAVE.c    **** 			TWCR_ACK;	
  82:TWISLAVE.c    **** 		}
  83:TWISLAVE.c    **** break;
  84:TWISLAVE.c    **** 
  85:TWISLAVE.c    **** 
  86:TWISLAVE.c    **** //Slave transmitter
  87:TWISLAVE.c    **** 
  88:TWISLAVE.c    **** case TW_ST_SLA_ACK: //0xA8 Slave wurde im Lesemodus adressiert und hat ein ACK zurückgegeben.
  89:TWISLAVE.c    **** 	//Hier steht kein break! Es wird also der folgende Code ebenfalls ausgeführt!
  90:TWISLAVE.c    **** 	
  91:TWISLAVE.c    **** case TW_ST_DATA_ACK: //0xB8 Slave Transmitter, Daten wurden angefordert
  92:TWISLAVE.c    **** 
  93:TWISLAVE.c    **** 	if (buffer_adr == 0xFF) //zuvor keine Leseadresse angegeben! 
 139               		.loc 1 93 0
 140 007e 8091 0000 		lds r24,buffer_adr
 141 0082 8F3F      		cpi r24,lo8(-1)
 142 0084 01F4      		brne .L14
  94:TWISLAVE.c    **** 		{
  95:TWISLAVE.c    **** 			buffer_adr=0;
 143               		.loc 1 95 0
 144 0086 1092 0000 		sts buffer_adr,__zero_reg__
 145               	.L14:
  96:TWISLAVE.c    **** 		}	
  97:TWISLAVE.c    **** 		
  98:TWISLAVE.c    **** 	if(buffer_adr<i2c_buffer_size+1)	
 146               		.loc 1 98 0
 147 008a 8091 0000 		lds r24,buffer_adr
 148 008e 8A31      		cpi r24,lo8(26)
 149 0090 00F4      		brsh .L15
  99:TWISLAVE.c    **** 		{
 100:TWISLAVE.c    **** 			TWDR = i2cdata[buffer_adr]; //Datenbyte senden
 150               		.loc 1 100 0
 151 0092 E091 0000 		lds r30,buffer_adr
 152 0096 F0E0      		ldi r31,0
 153 0098 E050      		subi r30,lo8(-(i2cdata))
 154 009a F040      		sbci r31,hi8(-(i2cdata))
 155 009c 8081      		ld r24,Z
 156 009e 83B9      		out 0x3,r24
 157               	.LVL6:
 158               	.L24:
 101:TWISLAVE.c    **** 			buffer_adr++; //bufferadresse für nächstes Byte weiterzählen
 159               		.loc 1 101 0
 160 00a0 8091 0000 		lds r24,buffer_adr
 161 00a4 8F5F      		subi r24,lo8(-(1))
 162               	.L25:
 163 00a6 8093 0000 		sts buffer_adr,r24
 164 00aa 00C0      		rjmp .L4
 165               	.LVL7:
 166               	.L15:
 102:TWISLAVE.c    **** 		}
 103:TWISLAVE.c    **** 	else
 104:TWISLAVE.c    **** 		{
 105:TWISLAVE.c    **** 			TWDR=0; //Kein Daten mehr im Buffer
 167               		.loc 1 105 0
 168 00ac 13B8      		out 0x3,__zero_reg__
 169               	.LVL8:
 170               	.L4:
 106:TWISLAVE.c    **** 		}
 107:TWISLAVE.c    **** 	TWCR_ACK;
 108:TWISLAVE.c    **** break;
 109:TWISLAVE.c    **** case TW_SR_STOP:
 110:TWISLAVE.c    ****             TWCR_ACK;
 171               		.loc 1 110 0
 172 00ae 85EC      		ldi r24,lo8(-59)
 173 00b0 00C0      		rjmp .L23
 174               	.LVL9:
 175               	.L3:
 111:TWISLAVE.c    ****         break;
 112:TWISLAVE.c    **** case TW_ST_DATA_NACK: // 0xC0 Keine Daten mehr gefordert 
 113:TWISLAVE.c    **** case TW_SR_DATA_NACK: // 0x88 
 114:TWISLAVE.c    **** case TW_ST_LAST_DATA: // 0xC8  Last data byte in TWDR has been transmitted (TWEA = “0”); ACK ha
 115:TWISLAVE.c    **** default: 	
 116:TWISLAVE.c    ****     TWCR_RESET;
 176               		.loc 1 116 0
 177 00b2 85ED      		ldi r24,lo8(-43)
 178               	.LVL10:
 179               	.L23:
 180 00b4 86BF      		out 0x36,r24
 181               	.L2:
 182               	/* epilogue start */
 117:TWISLAVE.c    **** break;
 118:TWISLAVE.c    **** 	
 119:TWISLAVE.c    **** } //end.switch (TW_STATUS)
 120:TWISLAVE.c    **** } //end.ISR(TWI_vect)
 183               		.loc 1 120 0
 184 00b6 FF91      		pop r31
 185 00b8 EF91      		pop r30
 186 00ba 9F91      		pop r25
 187 00bc 8F91      		pop r24
 188 00be 0F90      		pop r0
 189 00c0 0FBE      		out __SREG__,r0
 190 00c2 0F90      		pop r0
 191 00c4 1F90      		pop r1
 192 00c6 1895      		reti
 193               		.cfi_endproc
 194               	.LFE1:
 196               		.comm	buffer_adr,1,1
 197               		.comm	i2cdata,25,1
 198               	.Letext0:
 199               		.file 2 "TWISLAVE.h"
 200               		.file 3 "/usr/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 TWISLAVE.c
     /tmp/ccaHOrij.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccaHOrij.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccaHOrij.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccaHOrij.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccaHOrij.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccaHOrij.s:12     .text:0000000000000000 init_twi_slave
                            *COM*:0000000000000001 buffer_adr
     /tmp/ccaHOrij.s:49     .text:0000000000000018 __vector_17
                            *COM*:0000000000000019 i2cdata

UNDEFINED SYMBOLS
__do_clear_bss
