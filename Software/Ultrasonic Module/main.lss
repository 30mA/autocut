
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000dd8  00000e6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800066  00800066  00000e72  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e72  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015a8  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000093b  00000000  00000000  00002493  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000395  00000000  00000000  00002dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000288  00000000  00000000  00003164  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c3  00000000  00000000  000033ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a9e  00000000  00000000  000038af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000434d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8f c0       	rjmp	.+286    	; 0x120 <__ctors_end>
   2:	a9 c0       	rjmp	.+338    	; 0x156 <__bad_interrupt>
   4:	a9 c0       	rjmp	.+338    	; 0x158 <__vector_2>
   6:	a7 c0       	rjmp	.+334    	; 0x156 <__bad_interrupt>
   8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
   a:	a5 c0       	rjmp	.+330    	; 0x156 <__bad_interrupt>
   c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
   e:	a3 c0       	rjmp	.+326    	; 0x156 <__bad_interrupt>
  10:	a2 c0       	rjmp	.+324    	; 0x156 <__bad_interrupt>
  12:	a1 c0       	rjmp	.+322    	; 0x156 <__bad_interrupt>
  14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
  16:	9f c0       	rjmp	.+318    	; 0x156 <__bad_interrupt>
  18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
  1a:	9d c0       	rjmp	.+314    	; 0x156 <__bad_interrupt>
  1c:	9c c0       	rjmp	.+312    	; 0x156 <__bad_interrupt>
  1e:	9b c0       	rjmp	.+310    	; 0x156 <__bad_interrupt>
  20:	9a c0       	rjmp	.+308    	; 0x156 <__bad_interrupt>
  22:	c3 c0       	rjmp	.+390    	; 0x1aa <__vector_17>
  24:	98 c0       	rjmp	.+304    	; 0x156 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	00 40       	sbci	r16, 0x00	; 0
  28:	7a 10       	cpse	r7, r10
  2a:	f3 5a       	subi	r31, 0xA3	; 163
  2c:	00 a0       	ldd	r0, Z+32	; 0x20
  2e:	72 4e       	sbci	r23, 0xE2	; 226
  30:	18 09       	sbc	r17, r8
  32:	00 10       	cpse	r0, r0
  34:	a5 d4       	rcall	.+2378   	; 0x980 <dtoa_prf+0x96>
  36:	e8 00       	.word	0x00e8	; ????
  38:	00 e8       	ldi	r16, 0x80	; 128
  3a:	76 48       	sbci	r23, 0x86	; 134
  3c:	17 00       	.word	0x0017	; ????
  3e:	00 e4       	ldi	r16, 0x40	; 64
  40:	0b 54       	subi	r16, 0x4B	; 75
  42:	02 00       	.word	0x0002	; ????
  44:	00 ca       	rjmp	.-3072   	; 0xfffff446 <__eeprom_end+0xff7ef446>
  46:	9a 3b       	cpi	r25, 0xBA	; 186
  48:	00 00       	nop
  4a:	00 e1       	ldi	r16, 0x10	; 16
  4c:	f5 05       	cpc	r31, r5
  4e:	00 00       	nop
  50:	80 96       	adiw	r24, 0x20	; 32
  52:	98 00       	.word	0x0098	; ????
  54:	00 00       	nop
  56:	40 42       	sbci	r20, 0x20	; 32
  58:	0f 00       	.word	0x000f	; ????
  5a:	00 00       	nop
  5c:	a0 86       	std	Z+8, r10	; 0x08
  5e:	01 00       	.word	0x0001	; ????
  60:	00 00       	nop
  62:	10 27       	eor	r17, r16
  64:	00 00       	nop
  66:	00 00       	nop
  68:	e8 03       	fmulsu	r22, r16
  6a:	00 00       	nop
  6c:	00 00       	nop
  6e:	64 00       	.word	0x0064	; ????
  70:	00 00       	nop
  72:	00 00       	nop
  74:	0a 00       	.word	0x000a	; ????
  76:	00 00       	nop
  78:	00 00       	nop
  7a:	01 00       	.word	0x0001	; ????
  7c:	00 00       	nop
  7e:	00 00       	nop
  80:	2c 76       	andi	r18, 0x6C	; 108
  82:	d8 88       	ldd	r13, Y+16	; 0x10
  84:	dc 67       	ori	r29, 0x7C	; 124
  86:	4f 08       	sbc	r4, r15
  88:	23 df       	rcall	.-442    	; 0xfffffed0 <__eeprom_end+0xff7efed0>
  8a:	c1 df       	rcall	.-126    	; 0xe <__zero_reg__+0xd>
  8c:	ae 59       	subi	r26, 0x9E	; 158
  8e:	e1 b1       	in	r30, 0x01	; 1
  90:	b7 96       	adiw	r30, 0x27	; 39
  92:	e5 e3       	ldi	r30, 0x35	; 53
  94:	e4 53       	subi	r30, 0x34	; 52
  96:	c6 3a       	cpi	r28, 0xA6	; 166
  98:	e6 51       	subi	r30, 0x16	; 22
  9a:	99 76       	andi	r25, 0x69	; 105
  9c:	96 e8       	ldi	r25, 0x86	; 134
  9e:	e6 c2       	rjmp	.+1484   	; 0x66c <LCD_INIT+0x11a>
  a0:	84 26       	eor	r8, r20
  a2:	eb 89       	ldd	r30, Y+19	; 0x13
  a4:	8c 9b       	sbis	0x11, 4	; 17
  a6:	62 ed       	ldi	r22, 0xD2	; 210
  a8:	40 7c       	andi	r20, 0xC0	; 192
  aa:	6f fc       	.word	0xfc6f	; ????
  ac:	ef bc       	out	0x2f, r14	; 47
  ae:	9c 9f       	mul	r25, r28
  b0:	40 f2       	brcs	.-112    	; 0x42 <__SREG__+0x3>
  b2:	ba a5       	ldd	r27, Y+42	; 0x2a
  b4:	6f a5       	ldd	r22, Y+47	; 0x2f
  b6:	f4 90       	lpm	r15, Z
  b8:	05 5a       	subi	r16, 0xA5	; 165
  ba:	2a f7       	brpl	.-54     	; 0x86 <__SREG__+0x47>
  bc:	5c 93       	st	X, r21
  be:	6b 6c       	ori	r22, 0xCB	; 203
  c0:	f9 67       	ori	r31, 0x79	; 121
  c2:	6d c1       	rjmp	.+730    	; 0x39e <LCD_WRITE+0x36>
  c4:	1b fc       	.word	0xfc1b	; ????
  c6:	e0 e4       	ldi	r30, 0x40	; 64
  c8:	0d 47       	sbci	r16, 0x7D	; 125
  ca:	fe f5       	brtc	.+126    	; 0x14a <.do_clear_bss_loop>
  cc:	20 e6       	ldi	r18, 0x60	; 96
  ce:	b5 00       	.word	0x00b5	; ????
  d0:	d0 ed       	ldi	r29, 0xD0	; 208
  d2:	90 2e       	mov	r9, r16
  d4:	03 00       	.word	0x0003	; ????
  d6:	94 35       	cpi	r25, 0x54	; 84
  d8:	77 05       	cpc	r23, r7
  da:	00 80       	ld	r0, Z
  dc:	84 1e       	adc	r8, r20
  de:	08 00       	.word	0x0008	; ????
  e0:	00 20       	and	r0, r0
  e2:	4e 0a       	sbc	r4, r30
  e4:	00 00       	nop
  e6:	00 c8       	rjmp	.-4096   	; 0xfffff0e8 <__eeprom_end+0xff7ef0e8>
  e8:	0c 33       	cpi	r16, 0x3C	; 60
  ea:	33 33       	cpi	r19, 0x33	; 51
  ec:	33 0f       	add	r19, r19
  ee:	98 6e       	ori	r25, 0xE8	; 232
  f0:	12 83       	std	Z+2, r17	; 0x02
  f2:	11 41       	sbci	r17, 0x11	; 17
  f4:	ef 8d       	ldd	r30, Y+31	; 0x1f
  f6:	21 14       	cp	r2, r1
  f8:	89 3b       	cpi	r24, 0xB9	; 185
  fa:	e6 55       	subi	r30, 0x56	; 86
  fc:	16 cf       	rjmp	.-468    	; 0xffffff2a <__eeprom_end+0xff7eff2a>
  fe:	fe e6       	ldi	r31, 0x6E	; 110
 100:	db 18       	sub	r13, r11
 102:	d1 84       	ldd	r13, Z+9	; 0x09
 104:	4b 38       	cpi	r20, 0x8B	; 139
 106:	1b f7       	brvc	.-58     	; 0xce <__SREG__+0x8f>
 108:	7c 1d       	adc	r23, r12
 10a:	90 1d       	adc	r25, r0
 10c:	a4 bb       	out	0x14, r26	; 20
 10e:	e4 24       	eor	r14, r4
 110:	20 32       	cpi	r18, 0x20	; 32
 112:	84 72       	andi	r24, 0x24	; 36
 114:	5e 22       	and	r5, r30
 116:	81 00       	.word	0x0081	; ????
 118:	c9 f1       	breq	.+114    	; 0x18c <__vector_2+0x34>
 11a:	24 ec       	ldi	r18, 0xC4	; 196
 11c:	a1 e5       	ldi	r26, 0x51	; 81
 11e:	3d 27       	eor	r19, r29

00000120 <__ctors_end>:
 120:	11 24       	eor	r1, r1
 122:	1f be       	out	0x3f, r1	; 63
 124:	cf e5       	ldi	r28, 0x5F	; 95
 126:	d4 e0       	ldi	r29, 0x04	; 4
 128:	de bf       	out	0x3e, r29	; 62
 12a:	cd bf       	out	0x3d, r28	; 61

0000012c <__do_copy_data>:
 12c:	10 e0       	ldi	r17, 0x00	; 0
 12e:	a0 e6       	ldi	r26, 0x60	; 96
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e8 ed       	ldi	r30, 0xD8	; 216
 134:	fd e0       	ldi	r31, 0x0D	; 13
 136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x10>
 138:	05 90       	lpm	r0, Z+
 13a:	0d 92       	st	X+, r0
 13c:	a6 36       	cpi	r26, 0x66	; 102
 13e:	b1 07       	cpc	r27, r17
 140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0xc>

00000142 <__do_clear_bss>:
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	a6 e6       	ldi	r26, 0x66	; 102
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
 14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
 14c:	a3 38       	cpi	r26, 0x83	; 131
 14e:	b1 07       	cpc	r27, r17
 150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>
 152:	f6 d2       	rcall	.+1516   	; 0x740 <main>
 154:	3f c6       	rjmp	.+3198   	; 0xdd4 <_exit>

00000156 <__bad_interrupt>:
 156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <__vector_2>:
        return 0;
}

#define ReceiveCtrSignalValid 5
ISR (INT1_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
        static uint8_t ReceiveCtr = 0;
        if( (TCNT0 > 170) && (TCNT0 < 230) && (TIFR&(1<<TOV0) == 0) ) // 6MHz/40KHz=200
 164:	82 b7       	in	r24, 0x32	; 50
 166:	8b 3a       	cpi	r24, 0xAB	; 171
 168:	20 f0       	brcs	.+8      	; 0x172 <__vector_2+0x1a>
 16a:	82 b7       	in	r24, 0x32	; 50
 16c:	86 3e       	cpi	r24, 0xE6	; 230
 16e:	08 f4       	brcc	.+2      	; 0x172 <__vector_2+0x1a>
 170:	88 b7       	in	r24, 0x38	; 56
                if( ReceiveCtr<ReceiveCtrSignalValid)
                        ReceiveCtr++;
                
        }
        else
                ReceiveCtr=0;
 172:	10 92 68 00 	sts	0x0068, r1
        
        if( ReceiveCtr==ReceiveCtrSignalValid )
                Receiveing40KHz = True;
        else
                Receiveing40KHz = False;
 176:	10 92 67 00 	sts	0x0067, r1
        tmp = ReceiveCtr;
 17a:	10 92 66 00 	sts	0x0066, r1
        
        TCNT0 = 0;
 17e:	12 be       	out	0x32, r1	; 50
        TIFR &= ~(1<<TOV0); // Erase overflow flag
 180:	88 b7       	in	r24, 0x38	; 56
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	88 bf       	out	0x38, r24	; 56
}
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <init_twi_slave>:
/*Initaliserung des TWI-Inteface. Muss zu Beginn aufgerufen werden, sowie bei einem Wechsel der Slave Adresse
Parameter adr: gewünschte Slave-Adresse
*/
void init_twi_slave(uint8_t adr)
{
        TWAR= adr; //Adresse setzen
 192:	82 b9       	out	0x02, r24	; 2
	TWCR &= ~(1<<TWSTA)|(1<<TWSTO);
 194:	86 b7       	in	r24, 0x36	; 54
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	86 bf       	out	0x36, r24	; 54
	TWCR|= (1<<TWEA) | (1<<TWEN)|(1<<TWIE); 	
 19a:	86 b7       	in	r24, 0x36	; 54
 19c:	85 64       	ori	r24, 0x45	; 69
 19e:	86 bf       	out	0x36, r24	; 54
	buffer_adr=0xFF;  
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	80 93 82 00 	sts	0x0082, r24
	sei();
 1a6:	78 94       	sei
 1a8:	08 95       	ret

000001aa <__vector_17>:

/*ISR, die bei einem Ereignis auf dem Bus ausgelöst wird. Im Register TWSR befindet sich dann 
ein Statuscode, anhand dessen die Situation festgestellt werden kann.
*/
ISR (TWI_vect)  
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
uint8_t data=0;

switch (TW_STATUS) //TWI-Statusregister prüfen und nötige Aktion bestimmen 
 1bc:	81 b1       	in	r24, 0x01	; 1
 1be:	88 7f       	andi	r24, 0xF8	; 248
 1c0:	80 3a       	cpi	r24, 0xA0	; 160
 1c2:	f1 f1       	breq	.+124    	; 0x240 <__vector_17+0x96>
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <__vector_17+0x26>
 1c6:	80 36       	cpi	r24, 0x60	; 96
 1c8:	41 f0       	breq	.+16     	; 0x1da <__vector_17+0x30>
 1ca:	80 38       	cpi	r24, 0x80	; 128
 1cc:	61 f0       	breq	.+24     	; 0x1e6 <__vector_17+0x3c>
 1ce:	3a c0       	rjmp	.+116    	; 0x244 <__vector_17+0x9a>
 1d0:	88 3a       	cpi	r24, 0xA8	; 168
 1d2:	f1 f0       	breq	.+60     	; 0x210 <__vector_17+0x66>
 1d4:	88 3b       	cpi	r24, 0xB8	; 184
 1d6:	e1 f0       	breq	.+56     	; 0x210 <__vector_17+0x66>
 1d8:	35 c0       	rjmp	.+106    	; 0x244 <__vector_17+0x9a>
{

// Slave Receiver 

case TW_SR_SLA_ACK: // 0x60 Slave Receiver, Slave wurde adressiert	
	TWCR_ACK; // nächstes Datenbyte empfangen, ACK danach senden
 1da:	85 ec       	ldi	r24, 0xC5	; 197
 1dc:	86 bf       	out	0x36, r24	; 54
	buffer_adr=0xFF; //Bufferposition ist undefiniert
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	80 93 82 00 	sts	0x0082, r24
break;
 1e4:	31 c0       	rjmp	.+98     	; 0x248 <__vector_17+0x9e>
	
case TW_SR_DATA_ACK: // 0x80 Slave Receiver, ein Datenbyte wurde empfangen
	data=TWDR; //Empfangene Daten auslesen
 1e6:	83 b1       	in	r24, 0x03	; 3
	if (buffer_adr == 0xFF) //erster Zugriff, Bufferposition setzen
 1e8:	90 91 82 00 	lds	r25, 0x0082
 1ec:	9f 3f       	cpi	r25, 0xFF	; 255
 1ee:	29 f4       	brne	.+10     	; 0x1fa <__vector_17+0x50>
		{
			//Kontrolle ob gewünschte Adresse im erlaubten bereich
			if(data<i2c_buffer_size+1)
 1f0:	8a 31       	cpi	r24, 0x1A	; 26
 1f2:	10 f1       	brcs	.+68     	; 0x238 <__vector_17+0x8e>
				{
					buffer_adr= data; //Bufferposition wie adressiert setzen
				}
			else
				{
					buffer_adr=0; //Adresse auf Null setzen. Ist das sinnvoll? TO DO!
 1f4:	10 92 82 00 	sts	0x0082, r1
 1f8:	23 c0       	rjmp	.+70     	; 0x240 <__vector_17+0x96>
			TWCR_ACK;	// nächstes Datenbyte empfangen, ACK danach, um nächstes Byte anzufordern
		}
	else //weiterer Zugriff, nachdem die Position im Buffer gesetzt wurde. NUn die Daten empfangen und speichern
		{
		
			if(buffer_adr<i2c_buffer_size+1)
 1fa:	90 91 82 00 	lds	r25, 0x0082
 1fe:	9a 31       	cpi	r25, 0x1A	; 26
 200:	c0 f4       	brcc	.+48     	; 0x232 <__vector_17+0x88>
				{
						i2cdata[buffer_adr]=data; //Daten in Buffer schreibe	
 202:	e0 91 82 00 	lds	r30, 0x0082
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	e7 59       	subi	r30, 0x97	; 151
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	80 83       	st	Z, r24
 20e:	11 c0       	rjmp	.+34     	; 0x232 <__vector_17+0x88>
case TW_ST_SLA_ACK: //0xA8 Slave wurde im Lesemodus adressiert und hat ein ACK zurückgegeben.
	//Hier steht kein break! Es wird also der folgende Code ebenfalls ausgeführt!
	
case TW_ST_DATA_ACK: //0xB8 Slave Transmitter, Daten wurden angefordert

	if (buffer_adr == 0xFF) //zuvor keine Leseadresse angegeben! 
 210:	80 91 82 00 	lds	r24, 0x0082
 214:	8f 3f       	cpi	r24, 0xFF	; 255
 216:	11 f4       	brne	.+4      	; 0x21c <__vector_17+0x72>
		{
			buffer_adr=0;
 218:	10 92 82 00 	sts	0x0082, r1
		}	
		
	if(buffer_adr<i2c_buffer_size+1)	
 21c:	80 91 82 00 	lds	r24, 0x0082
 220:	8a 31       	cpi	r24, 0x1A	; 26
 222:	68 f4       	brcc	.+26     	; 0x23e <__vector_17+0x94>
		{
			TWDR = i2cdata[buffer_adr]; //Datenbyte senden
 224:	e0 91 82 00 	lds	r30, 0x0082
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	e7 59       	subi	r30, 0x97	; 151
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	80 81       	ld	r24, Z
 230:	83 b9       	out	0x03, r24	; 3
			buffer_adr++; //bufferadresse für nächstes Byte weiterzählen
 232:	80 91 82 00 	lds	r24, 0x0082
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 93 82 00 	sts	0x0082, r24
 23c:	01 c0       	rjmp	.+2      	; 0x240 <__vector_17+0x96>
		}
	else
		{
			TWDR=0; //Kein Daten mehr im Buffer
 23e:	13 b8       	out	0x03, r1	; 3
		}
	TWCR_ACK;
break;
case TW_SR_STOP:
            TWCR_ACK;
 240:	85 ec       	ldi	r24, 0xC5	; 197
 242:	01 c0       	rjmp	.+2      	; 0x246 <__vector_17+0x9c>
        break;
case TW_ST_DATA_NACK: // 0xC0 Keine Daten mehr gefordert 
case TW_SR_DATA_NACK: // 0x88 
case TW_ST_LAST_DATA: // 0xC8  Last data byte in TWDR has been transmitted (TWEA = “0”); ACK has been received
default: 	
    TWCR_RESET;
 244:	85 ed       	ldi	r24, 0xD5	; 213
 246:	86 bf       	out	0x36, r24	; 54
break;
	
} //end.switch (TW_STATUS)
} //end.ISR(TWI_vect)
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <LCD_SETPINS>:
#include <util/delay.h>
#include <stdlib.h>
#include "LCD.h"

void LCD_SETPINS (type_LCD *device, uint8_t data)
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	fc 01       	movw	r30, r24
	*device->port	&=~((1<< device->pinNr_D4)	\
 260:	c0 81       	ld	r28, Z
 262:	d1 81       	ldd	r29, Z+1	; 0x01
 264:	48 81       	ld	r20, Y
					|	(1<< device->pinNr_D5)	\
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	dc 01       	movw	r26, r24
 26c:	01 84       	ldd	r0, Z+9	; 0x09
 26e:	02 c0       	rjmp	.+4      	; 0x274 <LCD_SETPINS+0x1a>
 270:	aa 0f       	add	r26, r26
 272:	bb 1f       	adc	r27, r27
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <LCD_SETPINS+0x16>
#include <stdlib.h>
#include "LCD.h"

void LCD_SETPINS (type_LCD *device, uint8_t data)
{
	*device->port	&=~((1<< device->pinNr_D4)	\
 278:	9c 01       	movw	r18, r24
 27a:	00 84       	ldd	r0, Z+8	; 0x08
 27c:	02 c0       	rjmp	.+4      	; 0x282 <LCD_SETPINS+0x28>
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <LCD_SETPINS+0x24>
 286:	2a 2b       	or	r18, r26
					|	(1<< device->pinNr_D5)	\
					|	(1<< device->pinNr_D6)	\
 288:	dc 01       	movw	r26, r24
 28a:	02 84       	ldd	r0, Z+10	; 0x0a
 28c:	02 c0       	rjmp	.+4      	; 0x292 <LCD_SETPINS+0x38>
 28e:	aa 0f       	add	r26, r26
 290:	bb 1f       	adc	r27, r27
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <LCD_SETPINS+0x34>
#include <stdlib.h>
#include "LCD.h"

void LCD_SETPINS (type_LCD *device, uint8_t data)
{
	*device->port	&=~((1<< device->pinNr_D4)	\
 296:	a2 2b       	or	r26, r18
					|	(1<< device->pinNr_D5)	\
					|	(1<< device->pinNr_D6)	\
					|	(1<< device->pinNr_D7));
 298:	9c 01       	movw	r18, r24
 29a:	03 84       	ldd	r0, Z+11	; 0x0b
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <LCD_SETPINS+0x48>
 29e:	22 0f       	add	r18, r18
 2a0:	33 1f       	adc	r19, r19
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <LCD_SETPINS+0x44>
#include <stdlib.h>
#include "LCD.h"

void LCD_SETPINS (type_LCD *device, uint8_t data)
{
	*device->port	&=~((1<< device->pinNr_D4)	\
 2a6:	2a 2b       	or	r18, r26
 2a8:	20 95       	com	r18
 2aa:	24 23       	and	r18, r20
 2ac:	28 83       	st	Y, r18
					|	(1<< device->pinNr_D5)	\
					|	(1<< device->pinNr_D6)	\
					|	(1<< device->pinNr_D7));
	if(	data & 1<<0 ) *device->port	|= 	(1<< device->pinNr_D4);
 2ae:	60 ff       	sbrs	r22, 0
 2b0:	0b c0       	rjmp	.+22     	; 0x2c8 <LCD_SETPINS+0x6e>
 2b2:	a0 81       	ld	r26, Z
 2b4:	b1 81       	ldd	r27, Z+1	; 0x01
 2b6:	2c 91       	ld	r18, X
 2b8:	00 84       	ldd	r0, Z+8	; 0x08
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <LCD_SETPINS+0x66>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	0a 94       	dec	r0
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <LCD_SETPINS+0x62>
 2c4:	82 2b       	or	r24, r18
 2c6:	8c 93       	st	X, r24
	if(	data & 1<<1 ) *device->port	|= 	(1<< device->pinNr_D5);
 2c8:	61 ff       	sbrs	r22, 1
 2ca:	0d c0       	rjmp	.+26     	; 0x2e6 <LCD_SETPINS+0x8c>
 2cc:	a0 81       	ld	r26, Z
 2ce:	b1 81       	ldd	r27, Z+1	; 0x01
 2d0:	2c 91       	ld	r18, X
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	01 84       	ldd	r0, Z+9	; 0x09
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <LCD_SETPINS+0x84>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <LCD_SETPINS+0x80>
 2e2:	82 2b       	or	r24, r18
 2e4:	8c 93       	st	X, r24
	if(	data & 1<<2 ) *device->port	|= 	(1<< device->pinNr_D6);
 2e6:	62 ff       	sbrs	r22, 2
 2e8:	0d c0       	rjmp	.+26     	; 0x304 <LCD_SETPINS+0xaa>
 2ea:	a0 81       	ld	r26, Z
 2ec:	b1 81       	ldd	r27, Z+1	; 0x01
 2ee:	2c 91       	ld	r18, X
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 84       	ldd	r0, Z+10	; 0x0a
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <LCD_SETPINS+0xa2>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	0a 94       	dec	r0
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <LCD_SETPINS+0x9e>
 300:	82 2b       	or	r24, r18
 302:	8c 93       	st	X, r24
	if(	data & 1<<3 ) *device->port	|= 	(1<< device->pinNr_D7);
 304:	63 ff       	sbrs	r22, 3
 306:	0d c0       	rjmp	.+26     	; 0x322 <LCD_SETPINS+0xc8>
 308:	a0 81       	ld	r26, Z
 30a:	b1 81       	ldd	r27, Z+1	; 0x01
 30c:	2c 91       	ld	r18, X
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	03 84       	ldd	r0, Z+11	; 0x0b
 314:	02 c0       	rjmp	.+4      	; 0x31a <LCD_SETPINS+0xc0>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <LCD_SETPINS+0xbc>
 31e:	82 2b       	or	r24, r18
 320:	8c 93       	st	X, r24
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <LCD_ENABLE>:

void LCD_ENABLE(type_LCD *device)
{
 328:	fc 01       	movw	r30, r24
	*device->port |= (1<<device->pinNr_EN);
 32a:	a0 81       	ld	r26, Z
 32c:	b1 81       	ldd	r27, Z+1	; 0x01
 32e:	4c 91       	ld	r20, X
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	c9 01       	movw	r24, r18
 336:	06 80       	ldd	r0, Z+6	; 0x06
 338:	02 c0       	rjmp	.+4      	; 0x33e <LCD_ENABLE+0x16>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <LCD_ENABLE+0x12>
 342:	84 2b       	or	r24, r20
 344:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	8a 95       	dec	r24
 34a:	f1 f7       	brne	.-4      	; 0x348 <LCD_ENABLE+0x20>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <LCD_ENABLE+0x26>
	_delay_us(DELAY_EN_us);
	*device->port &=~ (1<<device->pinNr_EN);
 34e:	a0 81       	ld	r26, Z
 350:	b1 81       	ldd	r27, Z+1	; 0x01
 352:	8c 91       	ld	r24, X
 354:	06 80       	ldd	r0, Z+6	; 0x06
 356:	02 c0       	rjmp	.+4      	; 0x35c <LCD_ENABLE+0x34>
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	0a 94       	dec	r0
 35e:	e2 f7       	brpl	.-8      	; 0x358 <LCD_ENABLE+0x30>
 360:	20 95       	com	r18
 362:	28 23       	and	r18, r24
 364:	2c 93       	st	X, r18
 366:	08 95       	ret

00000368 <LCD_WRITE>:
}

void LCD_WRITE(type_LCD *device, uint8_t data_cmd, uint8_t data)
{
 368:	ff 92       	push	r15
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	ec 01       	movw	r28, r24
 374:	f6 2e       	mov	r15, r22
	uint8_t data_lowNibble = data & 0x0F;
 376:	14 2f       	mov	r17, r20
 378:	1f 70       	andi	r17, 0x0F	; 15
	uint8_t data_highNibble = (data >> 4) & 0x0F;
 37a:	04 2f       	mov	r16, r20
 37c:	02 95       	swap	r16
 37e:	0f 70       	andi	r16, 0x0F	; 15
	LCD_SETPINS(device, 0x0F);
 380:	6f e0       	ldi	r22, 0x0F	; 15
 382:	6b df       	rcall	.-298    	; 0x25a <LCD_SETPINS>
	if(data_cmd == LCD_CMD)
 384:	81 e0       	ldi	r24, 0x01	; 1
		*device->port	&=~	(1<< device->pinNr_RS);
 386:	e8 81       	ld	r30, Y
 388:	f9 81       	ldd	r31, Y+1	; 0x01
 38a:	20 81       	ld	r18, Z
void LCD_WRITE(type_LCD *device, uint8_t data_cmd, uint8_t data)
{
	uint8_t data_lowNibble = data & 0x0F;
	uint8_t data_highNibble = (data >> 4) & 0x0F;
	LCD_SETPINS(device, 0x0F);
	if(data_cmd == LCD_CMD)
 38c:	f8 12       	cpse	r15, r24
 38e:	0b c0       	rjmp	.+22     	; 0x3a6 <LCD_WRITE+0x3e>
		*device->port	&=~	(1<< device->pinNr_RS);
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0f 80       	ldd	r0, Y+7	; 0x07
 396:	02 c0       	rjmp	.+4      	; 0x39c <LCD_WRITE+0x34>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <LCD_WRITE+0x30>
 3a0:	80 95       	com	r24
 3a2:	82 23       	and	r24, r18
 3a4:	09 c0       	rjmp	.+18     	; 0x3b8 <LCD_WRITE+0x50>
	else
		*device->port	|=	(1<< device->pinNr_RS);
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0f 80       	ldd	r0, Y+7	; 0x07
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <LCD_WRITE+0x4a>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	0a 94       	dec	r0
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <LCD_WRITE+0x46>
 3b6:	82 2b       	or	r24, r18
 3b8:	80 83       	st	Z, r24
	*device->port	&=~	(1<< device->pinNr_EN);
 3ba:	e8 81       	ld	r30, Y
 3bc:	f9 81       	ldd	r31, Y+1	; 0x01
 3be:	20 81       	ld	r18, Z
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 80       	ldd	r0, Y+6	; 0x06
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <LCD_WRITE+0x64>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	0a 94       	dec	r0
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <LCD_WRITE+0x60>
 3d0:	80 95       	com	r24
 3d2:	82 23       	and	r24, r18
 3d4:	80 83       	st	Z, r24
	LCD_SETPINS(device, data_highNibble);
 3d6:	60 2f       	mov	r22, r16
 3d8:	ce 01       	movw	r24, r28
 3da:	3f df       	rcall	.-386    	; 0x25a <LCD_SETPINS>
	LCD_ENABLE(device);
 3dc:	ce 01       	movw	r24, r28
 3de:	a4 df       	rcall	.-184    	; 0x328 <LCD_ENABLE>
 3e0:	98 e7       	ldi	r25, 0x78	; 120
 3e2:	9a 95       	dec	r25
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <LCD_WRITE+0x7a>
	_delay_us(45);
	LCD_SETPINS(device, data_lowNibble);
 3e6:	61 2f       	mov	r22, r17
 3e8:	ce 01       	movw	r24, r28
 3ea:	37 df       	rcall	.-402    	; 0x25a <LCD_SETPINS>
	LCD_ENABLE(device);
 3ec:	ce 01       	movw	r24, r28
 3ee:	9c df       	rcall	.-200    	; 0x328 <LCD_ENABLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f0:	8f e9       	ldi	r24, 0x9F	; 159
 3f2:	9f e0       	ldi	r25, 0x0F	; 15
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCD_WRITE+0x8c>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCD_WRITE+0x92>
 3fa:	00 00       	nop
	_delay_ms(2);
	LCD_SETPINS(device, 0);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	ce 01       	movw	r24, r28
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
	LCD_ENABLE(device);
	_delay_us(45);
	LCD_SETPINS(device, data_lowNibble);
	LCD_ENABLE(device);
	_delay_ms(2);
	LCD_SETPINS(device, 0);
 40a:	27 cf       	rjmp	.-434    	; 0x25a <LCD_SETPINS>

0000040c <LCD_STRING>:
}

void LCD_STRING(type_LCD *device, char *string)
{
 40c:	0f 93       	push	r16
 40e:	1f 93       	push	r17
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	8c 01       	movw	r16, r24
 416:	eb 01       	movw	r28, r22
	while(*string)
 418:	49 91       	ld	r20, Y+
 41a:	44 23       	and	r20, r20
 41c:	21 f0       	breq	.+8      	; 0x426 <LCD_STRING+0x1a>
		LCD_WRITE(device, LCD_DATA, *string++);
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	c8 01       	movw	r24, r16
 422:	a2 df       	rcall	.-188    	; 0x368 <LCD_WRITE>
 424:	f9 cf       	rjmp	.-14     	; 0x418 <LCD_STRING+0xc>
}
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	08 95       	ret

00000430 <LCD_CLEAR>:


void LCD_CLEAR(type_LCD *device)
{
	LCD_WRITE(device, LCD_CMD, 0x01);
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	61 e0       	ldi	r22, 0x01	; 1
 434:	99 cf       	rjmp	.-206    	; 0x368 <LCD_WRITE>

00000436 <LCD_HOME>:
}

void LCD_HOME(type_LCD *device)
{
	LCD_WRITE(device, LCD_CMD, 0x02);
 436:	42 e0       	ldi	r20, 0x02	; 2
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	96 cf       	rjmp	.-212    	; 0x368 <LCD_WRITE>

0000043c <LCD_POS>:
}

void LCD_POS(type_LCD *device, uint8_t line, uint8_t column)
{
	LCD_WRITE(device, LCD_CMD, 0b10000000 + line*64 + column);
 43c:	20 e4       	ldi	r18, 0x40	; 64
 43e:	62 9f       	mul	r22, r18
 440:	40 0d       	add	r20, r0
 442:	11 24       	eor	r1, r1
 444:	40 58       	subi	r20, 0x80	; 128
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	8f cf       	rjmp	.-226    	; 0x368 <LCD_WRITE>

0000044a <LCD_INTX>:
{
	LCD_INTX(device, number, DEC, 0);
}

void LCD_INTX(type_LCD *device, uint16_t number, uint8_t format, uint8_t digits)
{
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
 456:	60 97       	sbiw	r28, 0x10	; 16
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
 462:	8c 01       	movw	r16, r24
 464:	cb 01       	movw	r24, r22
	// TODO: implement digits
	char string[16];
	itoa(number,string, format);
 466:	50 e0       	ldi	r21, 0x00	; 0
extern __inline__ __ATTR_GNU_INLINE__
char *itoa (int __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__itoa (int, char *, int);
	return __itoa (__val, __s, __radix);
 468:	be 01       	movw	r22, r28
 46a:	6f 5f       	subi	r22, 0xFF	; 255
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	10 d2       	rcall	.+1056   	; 0x890 <itoa>
	LCD_STRING(device, string);
 470:	be 01       	movw	r22, r28
 472:	6f 5f       	subi	r22, 0xFF	; 255
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	c8 01       	movw	r24, r16
 478:	c9 df       	rcall	.-110    	; 0x40c <LCD_STRING>
}
 47a:	60 96       	adiw	r28, 0x10	; 16
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	08 95       	ret

00000490 <LCD_INT>:
	LCD_WRITE(device, LCD_CMD, 0b10000000 + line*64 + column);
}

void LCD_INT(type_LCD *device, uint16_t number)
{
	LCD_INTX(device, number, DEC, 0);
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	4a e0       	ldi	r20, 0x0A	; 10
 494:	da cf       	rjmp	.-76     	; 0x44a <LCD_INTX>

00000496 <LCD_FLOATX>:
{
	LCD_FLOATX(device, number, 0, 2);
}

void LCD_FLOATX(type_LCD *device, float number, uint8_t digitsLeft, uint8_t digitsRight)
{
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	cd b7       	in	r28, 0x3d	; 61
 4a4:	de b7       	in	r29, 0x3e	; 62
 4a6:	60 97       	sbiw	r28, 0x10	; 16
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	f8 94       	cli
 4ac:	de bf       	out	0x3e, r29	; 62
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	cd bf       	out	0x3d, r28	; 61
 4b2:	7c 01       	movw	r14, r24
 4b4:	cb 01       	movw	r24, r22
 4b6:	ba 01       	movw	r22, r20
 4b8:	20 2f       	mov	r18, r16
	// TODO: implement digitsLeft
	char string[16];
	dtostrf(number,1,digitsRight,string);
 4ba:	8e 01       	movw	r16, r28
 4bc:	0f 5f       	subi	r16, 0xFF	; 255
 4be:	1f 4f       	sbci	r17, 0xFF	; 255
 4c0:	41 e0       	ldi	r20, 0x01	; 1
 4c2:	c6 d1       	rcall	.+908    	; 0x850 <dtostrf>
	LCD_STRING(device, string);
 4c4:	b8 01       	movw	r22, r16
 4c6:	c7 01       	movw	r24, r14
 4c8:	a1 df       	rcall	.-190    	; 0x40c <LCD_STRING>
}
 4ca:	60 96       	adiw	r28, 0x10	; 16
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	f8 94       	cli
 4d0:	de bf       	out	0x3e, r29	; 62
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	cd bf       	out	0x3d, r28	; 61
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	08 95       	ret

000004e4 <LCD_FLOAT>:
	LCD_STRING(device, string);
}


void LCD_FLOAT(type_LCD *device, float number)
{
 4e4:	0f 93       	push	r16
	LCD_FLOATX(device, number, 0, 2);
 4e6:	02 e0       	ldi	r16, 0x02	; 2
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	d5 df       	rcall	.-86     	; 0x496 <LCD_FLOATX>
}
 4ec:	0f 91       	pop	r16
 4ee:	08 95       	ret

000004f0 <LCD_GENERATECHAR>:
	dtostrf(number,1,digitsRight,string);
	LCD_STRING(device, string);
}

void LCD_GENERATECHAR(type_LCD *device, uint8_t code, uint8_t *data)
{
 4f0:	cf 92       	push	r12
 4f2:	df 92       	push	r13
 4f4:	ef 92       	push	r14
 4f6:	ff 92       	push	r15
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	1f 92       	push	r1
 502:	cd b7       	in	r28, 0x3d	; 61
 504:	de b7       	in	r29, 0x3e	; 62
 506:	8c 01       	movw	r16, r24
 508:	f4 2e       	mov	r15, r20
	LCD_WRITE(device, LCD_CMD, LCD_SET_CGADR|(code<<3));
 50a:	88 e0       	ldi	r24, 0x08	; 8
 50c:	68 9f       	mul	r22, r24
 50e:	b0 01       	movw	r22, r0
 510:	11 24       	eor	r1, r1
 512:	46 2f       	mov	r20, r22
 514:	40 64       	ori	r20, 0x40	; 64
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	c8 01       	movw	r24, r16
 51a:	59 83       	std	Y+1, r21	; 0x01
 51c:	25 df       	rcall	.-438    	; 0x368 <LCD_WRITE>
 51e:	cf 2c       	mov	r12, r15
 520:	59 81       	ldd	r21, Y+1	; 0x01
 522:	d5 2e       	mov	r13, r21
 524:	76 01       	movw	r14, r12
 526:	e8 e0       	ldi	r30, 0x08	; 8
 528:	ee 0e       	add	r14, r30
 52a:	f1 1c       	adc	r15, r1
	for (uint8_t i=0; i<8; i++)
	{
		LCD_WRITE(device, LCD_DATA, data[i]);
 52c:	f6 01       	movw	r30, r12
 52e:	41 91       	ld	r20, Z+
 530:	6f 01       	movw	r12, r30
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	c8 01       	movw	r24, r16
 536:	18 df       	rcall	.-464    	; 0x368 <LCD_WRITE>
}

void LCD_GENERATECHAR(type_LCD *device, uint8_t code, uint8_t *data)
{
	LCD_WRITE(device, LCD_CMD, LCD_SET_CGADR|(code<<3));
	for (uint8_t i=0; i<8; i++)
 538:	ce 14       	cp	r12, r14
 53a:	df 04       	cpc	r13, r15
 53c:	b9 f7       	brne	.-18     	; 0x52c <LCD_GENERATECHAR+0x3c>
	{
		LCD_WRITE(device, LCD_DATA, data[i]);
	}
}
 53e:	0f 90       	pop	r0
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	ff 90       	pop	r15
 54a:	ef 90       	pop	r14
 54c:	df 90       	pop	r13
 54e:	cf 90       	pop	r12
 550:	08 95       	ret

00000552 <LCD_INIT>:

void LCD_INIT(type_LCD *device)
{
 552:	ff 92       	push	r15
 554:	0f 93       	push	r16
 556:	1f 93       	push	r17
 558:	cf 93       	push	r28
 55a:	df 93       	push	r29
 55c:	ec 01       	movw	r28, r24
	*device->ddr	|= 	(1<< device->pinNr_RS)	\
 55e:	ec 81       	ldd	r30, Y+4	; 0x04
 560:	fd 81       	ldd	r31, Y+5	; 0x05
 562:	30 81       	ld	r19, Z
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	bc 01       	movw	r22, r24
 56a:	0f 80       	ldd	r0, Y+7	; 0x07
 56c:	02 c0       	rjmp	.+4      	; 0x572 <LCD_INIT+0x20>
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	0a 94       	dec	r0
 574:	e2 f7       	brpl	.-8      	; 0x56e <LCD_INIT+0x1c>
					|	(1<< device->pinNr_EN)	\
 576:	ac 01       	movw	r20, r24
 578:	0e 80       	ldd	r0, Y+6	; 0x06
 57a:	02 c0       	rjmp	.+4      	; 0x580 <LCD_INIT+0x2e>
 57c:	44 0f       	add	r20, r20
 57e:	55 1f       	adc	r21, r21
 580:	0a 94       	dec	r0
 582:	e2 f7       	brpl	.-8      	; 0x57c <LCD_INIT+0x2a>
	}
}

void LCD_INIT(type_LCD *device)
{
	*device->ddr	|= 	(1<< device->pinNr_RS)	\
 584:	46 2b       	or	r20, r22
 586:	43 2b       	or	r20, r19
					|	(1<< device->pinNr_EN)	\
					|	(1<< device->pinNr_D4)	\
 588:	bc 01       	movw	r22, r24
 58a:	08 84       	ldd	r0, Y+8	; 0x08
 58c:	02 c0       	rjmp	.+4      	; 0x592 <LCD_INIT+0x40>
 58e:	66 0f       	add	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	0a 94       	dec	r0
 594:	e2 f7       	brpl	.-8      	; 0x58e <LCD_INIT+0x3c>
 596:	24 2f       	mov	r18, r20
 598:	26 2b       	or	r18, r22
					|	(1<< device->pinNr_D5)	\
 59a:	ac 01       	movw	r20, r24
 59c:	09 84       	ldd	r0, Y+9	; 0x09
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <LCD_INIT+0x52>
 5a0:	44 0f       	add	r20, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	0a 94       	dec	r0
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <LCD_INIT+0x4e>
 5a8:	42 2b       	or	r20, r18
					|	(1<< device->pinNr_D6)	\
 5aa:	9c 01       	movw	r18, r24
 5ac:	0a 84       	ldd	r0, Y+10	; 0x0a
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <LCD_INIT+0x62>
 5b0:	22 0f       	add	r18, r18
 5b2:	33 1f       	adc	r19, r19
 5b4:	0a 94       	dec	r0
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <LCD_INIT+0x5e>
 5b8:	24 2b       	or	r18, r20
					|	(1<< device->pinNr_D7);
 5ba:	0b 84       	ldd	r0, Y+11	; 0x0b
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <LCD_INIT+0x70>
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	0a 94       	dec	r0
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <LCD_INIT+0x6c>
	}
}

void LCD_INIT(type_LCD *device)
{
	*device->ddr	|= 	(1<< device->pinNr_RS)	\
 5c6:	82 2b       	or	r24, r18
 5c8:	80 83       	st	Z, r24
 5ca:	83 e0       	ldi	r24, 0x03	; 3
 5cc:	f8 2e       	mov	r15, r24
					|	(1<< device->pinNr_D5)	\
					|	(1<< device->pinNr_D6)	\
					|	(1<< device->pinNr_D7);
	for(uint8_t inits=0; inits<TIME_OF_INITS; inits++)
	{
		*device->port	|= 	(1<< device->pinNr_RS)	\
 5ce:	01 e0       	ldi	r16, 0x01	; 1
 5d0:	10 e0       	ldi	r17, 0x00	; 0
 5d2:	e8 81       	ld	r30, Y
 5d4:	f9 81       	ldd	r31, Y+1	; 0x01
 5d6:	90 81       	ld	r25, Z
 5d8:	b8 01       	movw	r22, r16
 5da:	0f 80       	ldd	r0, Y+7	; 0x07
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <LCD_INIT+0x90>
 5de:	66 0f       	add	r22, r22
 5e0:	77 1f       	adc	r23, r23
 5e2:	0a 94       	dec	r0
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <LCD_INIT+0x8c>
						|	(1<< device->pinNr_EN)	\
 5e6:	98 01       	movw	r18, r16
 5e8:	0e 80       	ldd	r0, Y+6	; 0x06
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <LCD_INIT+0x9e>
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	0a 94       	dec	r0
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <LCD_INIT+0x9a>
					|	(1<< device->pinNr_D5)	\
					|	(1<< device->pinNr_D6)	\
					|	(1<< device->pinNr_D7);
	for(uint8_t inits=0; inits<TIME_OF_INITS; inits++)
	{
		*device->port	|= 	(1<< device->pinNr_RS)	\
 5f4:	26 2b       	or	r18, r22
 5f6:	29 2b       	or	r18, r25
						|	(1<< device->pinNr_EN)	\
						|	(1<< device->pinNr_D4)	\
 5f8:	b8 01       	movw	r22, r16
 5fa:	08 84       	ldd	r0, Y+8	; 0x08
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <LCD_INIT+0xb0>
 5fe:	66 0f       	add	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	0a 94       	dec	r0
 604:	e2 f7       	brpl	.-8      	; 0x5fe <LCD_INIT+0xac>
 606:	26 2b       	or	r18, r22
						|	(1<< device->pinNr_D5)	\
 608:	a8 01       	movw	r20, r16
 60a:	09 84       	ldd	r0, Y+9	; 0x09
 60c:	02 c0       	rjmp	.+4      	; 0x612 <LCD_INIT+0xc0>
 60e:	44 0f       	add	r20, r20
 610:	55 1f       	adc	r21, r21
 612:	0a 94       	dec	r0
 614:	e2 f7       	brpl	.-8      	; 0x60e <LCD_INIT+0xbc>
 616:	82 2f       	mov	r24, r18
 618:	84 2b       	or	r24, r20
						|	(1<< device->pinNr_D6)	\
 61a:	98 01       	movw	r18, r16
 61c:	0a 84       	ldd	r0, Y+10	; 0x0a
 61e:	02 c0       	rjmp	.+4      	; 0x624 <LCD_INIT+0xd2>
 620:	22 0f       	add	r18, r18
 622:	33 1f       	adc	r19, r19
 624:	0a 94       	dec	r0
 626:	e2 f7       	brpl	.-8      	; 0x620 <LCD_INIT+0xce>
 628:	28 2b       	or	r18, r24
						|	(1<< device->pinNr_D7);	
 62a:	c8 01       	movw	r24, r16
 62c:	0b 84       	ldd	r0, Y+11	; 0x0b
 62e:	02 c0       	rjmp	.+4      	; 0x634 <LCD_INIT+0xe2>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	0a 94       	dec	r0
 636:	e2 f7       	brpl	.-8      	; 0x630 <LCD_INIT+0xde>
					|	(1<< device->pinNr_D5)	\
					|	(1<< device->pinNr_D6)	\
					|	(1<< device->pinNr_D7);
	for(uint8_t inits=0; inits<TIME_OF_INITS; inits++)
	{
		*device->port	|= 	(1<< device->pinNr_RS)	\
 638:	82 2b       	or	r24, r18
 63a:	80 83       	st	Z, r24
						|	(1<< device->pinNr_D4)	\
						|	(1<< device->pinNr_D5)	\
						|	(1<< device->pinNr_D6)	\
						|	(1<< device->pinNr_D7);	
						
		*device->port	&=~((1<< device->pinNr_RS)	\
 63c:	e8 81       	ld	r30, Y
 63e:	f9 81       	ldd	r31, Y+1	; 0x01
 640:	20 81       	ld	r18, Z
						|	(1<< device->pinNr_EN));
 642:	a8 01       	movw	r20, r16
 644:	0e 80       	ldd	r0, Y+6	; 0x06
 646:	02 c0       	rjmp	.+4      	; 0x64c <LCD_INIT+0xfa>
 648:	44 0f       	add	r20, r20
 64a:	55 1f       	adc	r21, r21
 64c:	0a 94       	dec	r0
 64e:	e2 f7       	brpl	.-8      	; 0x648 <LCD_INIT+0xf6>
						|	(1<< device->pinNr_D4)	\
						|	(1<< device->pinNr_D5)	\
						|	(1<< device->pinNr_D6)	\
						|	(1<< device->pinNr_D7);	
						
		*device->port	&=~((1<< device->pinNr_RS)	\
 650:	c8 01       	movw	r24, r16
 652:	0f 80       	ldd	r0, Y+7	; 0x07
 654:	02 c0       	rjmp	.+4      	; 0x65a <LCD_INIT+0x108>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	0a 94       	dec	r0
 65c:	e2 f7       	brpl	.-8      	; 0x656 <LCD_INIT+0x104>
 65e:	84 2b       	or	r24, r20
 660:	80 95       	com	r24
 662:	82 23       	and	r24, r18
 664:	80 83       	st	Z, r24
 666:	8f e2       	ldi	r24, 0x2F	; 47
 668:	95 e7       	ldi	r25, 0x75	; 117
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	f1 f7       	brne	.-4      	; 0x66a <LCD_INIT+0x118>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <LCD_INIT+0x11e>
 670:	00 00       	nop
						|	(1<< device->pinNr_EN));
		_delay_ms(15);
		*device->port	|= 	(1<< device->pinNr_EN);
 672:	e8 81       	ld	r30, Y
 674:	f9 81       	ldd	r31, Y+1	; 0x01
 676:	20 81       	ld	r18, Z
 678:	c8 01       	movw	r24, r16
 67a:	0e 80       	ldd	r0, Y+6	; 0x06
 67c:	02 c0       	rjmp	.+4      	; 0x682 <LCD_INIT+0x130>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	0a 94       	dec	r0
 684:	e2 f7       	brpl	.-8      	; 0x67e <LCD_INIT+0x12c>
 686:	82 2b       	or	r24, r18
 688:	80 83       	st	Z, r24
		*device->port	&=~	(1<< device->pinNr_RS);
 68a:	e8 81       	ld	r30, Y
 68c:	f9 81       	ldd	r31, Y+1	; 0x01
 68e:	90 81       	ld	r25, Z
 690:	98 01       	movw	r18, r16
 692:	0f 80       	ldd	r0, Y+7	; 0x07
 694:	02 c0       	rjmp	.+4      	; 0x69a <LCD_INIT+0x148>
 696:	22 0f       	add	r18, r18
 698:	33 1f       	adc	r19, r19
 69a:	0a 94       	dec	r0
 69c:	e2 f7       	brpl	.-8      	; 0x696 <LCD_INIT+0x144>
 69e:	82 2f       	mov	r24, r18
 6a0:	80 95       	com	r24
 6a2:	89 23       	and	r24, r25
 6a4:	80 83       	st	Z, r24
		LCD_ENABLE(device);
 6a6:	ce 01       	movw	r24, r28
 6a8:	3f de       	rcall	.-898    	; 0x328 <LCD_ENABLE>
 6aa:	8f e0       	ldi	r24, 0x0F	; 15
 6ac:	97 e2       	ldi	r25, 0x27	; 39
 6ae:	01 97       	sbiw	r24, 0x01	; 1
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <LCD_INIT+0x15c>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <LCD_INIT+0x162>
 6b4:	00 00       	nop
		_delay_ms(5);
		LCD_ENABLE(device);
 6b6:	ce 01       	movw	r24, r28
 6b8:	37 de       	rcall	.-914    	; 0x328 <LCD_ENABLE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ba:	87 ec       	ldi	r24, 0xC7	; 199
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	01 97       	sbiw	r24, 0x01	; 1
 6c0:	f1 f7       	brne	.-4      	; 0x6be <LCD_INIT+0x16c>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <LCD_INIT+0x172>
 6c4:	00 00       	nop
		_delay_us(100);
		LCD_ENABLE(device);
 6c6:	ce 01       	movw	r24, r28
 6c8:	2f de       	rcall	.-930    	; 0x328 <LCD_ENABLE>
 6ca:	87 ec       	ldi	r24, 0xC7	; 199
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	01 97       	sbiw	r24, 0x01	; 1
 6d0:	f1 f7       	brne	.-4      	; 0x6ce <LCD_INIT+0x17c>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <LCD_INIT+0x182>
 6d4:	00 00       	nop
		_delay_us(100);
		LCD_SETPINS(device, 0x02);
 6d6:	62 e0       	ldi	r22, 0x02	; 2
 6d8:	ce 01       	movw	r24, r28
 6da:	bf dd       	rcall	.-1154   	; 0x25a <LCD_SETPINS>
		LCD_ENABLE(device);
 6dc:	ce 01       	movw	r24, r28
 6de:	24 de       	rcall	.-952    	; 0x328 <LCD_ENABLE>
 6e0:	87 ec       	ldi	r24, 0xC7	; 199
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	01 97       	sbiw	r24, 0x01	; 1
 6e6:	f1 f7       	brne	.-4      	; 0x6e4 <LCD_INIT+0x192>
 6e8:	00 c0       	rjmp	.+0      	; 0x6ea <LCD_INIT+0x198>
 6ea:	00 00       	nop
		_delay_us(100);
		LCD_WRITE(device, LCD_CMD, 0x28);
 6ec:	48 e2       	ldi	r20, 0x28	; 40
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	ce 01       	movw	r24, r28
 6f2:	3a de       	rcall	.-908    	; 0x368 <LCD_WRITE>
		LCD_WRITE(device, LCD_CMD, 0x08);
 6f4:	48 e0       	ldi	r20, 0x08	; 8
 6f6:	61 e0       	ldi	r22, 0x01	; 1
 6f8:	ce 01       	movw	r24, r28
 6fa:	36 de       	rcall	.-916    	; 0x368 <LCD_WRITE>
		LCD_WRITE(device, LCD_CMD, 0x01);
 6fc:	41 e0       	ldi	r20, 0x01	; 1
 6fe:	61 e0       	ldi	r22, 0x01	; 1
 700:	ce 01       	movw	r24, r28
 702:	32 de       	rcall	.-924    	; 0x368 <LCD_WRITE>
		LCD_WRITE(device, LCD_CMD, 0x06);
 704:	46 e0       	ldi	r20, 0x06	; 6
 706:	61 e0       	ldi	r22, 0x01	; 1
 708:	ce 01       	movw	r24, r28
 70a:	2e de       	rcall	.-932    	; 0x368 <LCD_WRITE>
		LCD_WRITE(device, LCD_CMD, 0x0C);
 70c:	4c e0       	ldi	r20, 0x0C	; 12
 70e:	61 e0       	ldi	r22, 0x01	; 1
 710:	ce 01       	movw	r24, r28
 712:	2a de       	rcall	.-940    	; 0x368 <LCD_WRITE>
		LCD_WRITE(device, LCD_CMD, 0b00000001);
 714:	41 e0       	ldi	r20, 0x01	; 1
 716:	61 e0       	ldi	r22, 0x01	; 1
 718:	ce 01       	movw	r24, r28
 71a:	26 de       	rcall	.-948    	; 0x368 <LCD_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71c:	9f ef       	ldi	r25, 0xFF	; 255
 71e:	20 e7       	ldi	r18, 0x70	; 112
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	91 50       	subi	r25, 0x01	; 1
 724:	20 40       	sbci	r18, 0x00	; 0
 726:	80 40       	sbci	r24, 0x00	; 0
 728:	e1 f7       	brne	.-8      	; 0x722 <LCD_INIT+0x1d0>
 72a:	00 c0       	rjmp	.+0      	; 0x72c <LCD_INIT+0x1da>
 72c:	00 00       	nop
 72e:	fa 94       	dec	r15
					|	(1<< device->pinNr_EN)	\
					|	(1<< device->pinNr_D4)	\
					|	(1<< device->pinNr_D5)	\
					|	(1<< device->pinNr_D6)	\
					|	(1<< device->pinNr_D7);
	for(uint8_t inits=0; inits<TIME_OF_INITS; inits++)
 730:	f1 10       	cpse	r15, r1
 732:	4f cf       	rjmp	.-354    	; 0x5d2 <LCD_INIT+0x80>
		LCD_WRITE(device, LCD_CMD, 0x06);
		LCD_WRITE(device, LCD_CMD, 0x0C);
		LCD_WRITE(device, LCD_CMD, 0b00000001);
		_delay_ms(100);
	}
}
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	1f 91       	pop	r17
 73a:	0f 91       	pop	r16
 73c:	ff 90       	pop	r15
 73e:	08 95       	ret

00000740 <main>:

uint8_t Receiveing40KHz=False;
uint8_t tmp = 0;

int main (void)
{
 740:	cf 93       	push	r28
 742:	df 93       	push	r29
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
 748:	2c 97       	sbiw	r28, 0x0c	; 12
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61
        Clear(USC_DDR, USC_signal);
 754:	81 b3       	in	r24, 0x11	; 17
 756:	8c 7f       	andi	r24, 0xFC	; 252
 758:	81 bb       	out	0x11, r24	; 17
        Set(USC_DDR, USC_threshold);
 75a:	8a 9a       	sbi	0x11, 2	; 17
        Set(USC_PORT, USC_threshold); // hearing=yes
 75c:	92 9a       	sbi	0x12, 2	; 18
        Set(USC_DDR, USC_HVoff);
 75e:	89 9a       	sbi	0x11, 1	; 17
        Clear(USC_PORT, USC_HVoff);
 760:	91 98       	cbi	0x12, 1	; 18

	type_LCD frontLCD;
	
	/// Configure Devices //////////////////////////////////////
	// Display configuration:
		frontLCD.ddr = &DDRC;
 762:	84 e3       	ldi	r24, 0x34	; 52
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	9e 83       	std	Y+6, r25	; 0x06
 768:	8d 83       	std	Y+5, r24	; 0x05
		frontLCD.port = &PORTC;
 76a:	85 e3       	ldi	r24, 0x35	; 53
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	9a 83       	std	Y+2, r25	; 0x02
 770:	89 83       	std	Y+1, r24	; 0x01
		frontLCD.pin = &PINC;
 772:	83 e3       	ldi	r24, 0x33	; 51
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	9c 83       	std	Y+4, r25	; 0x04
 778:	8b 83       	std	Y+3, r24	; 0x03
		frontLCD.pinNr_EN = PC1;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	8f 83       	std	Y+7, r24	; 0x07
		frontLCD.pinNr_RS = PC0;
 77e:	18 86       	std	Y+8, r1	; 0x08
		frontLCD.pinNr_D4 = PC3;
 780:	83 e0       	ldi	r24, 0x03	; 3
 782:	89 87       	std	Y+9, r24	; 0x09
		frontLCD.pinNr_D5 = PC2;
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	8a 87       	std	Y+10, r24	; 0x0a
		frontLCD.pinNr_D6 = PC5;
 788:	85 e0       	ldi	r24, 0x05	; 5
 78a:	8b 87       	std	Y+11, r24	; 0x0b
		frontLCD.pinNr_D7 = PC4;
 78c:	84 e0       	ldi	r24, 0x04	; 4
 78e:	8c 87       	std	Y+12, r24	; 0x0c
 790:	2f ef       	ldi	r18, 0xFF	; 255
 792:	81 ee       	ldi	r24, 0xE1	; 225
 794:	94 e0       	ldi	r25, 0x04	; 4
 796:	21 50       	subi	r18, 0x01	; 1
 798:	80 40       	sbci	r24, 0x00	; 0
 79a:	90 40       	sbci	r25, 0x00	; 0
 79c:	e1 f7       	brne	.-8      	; 0x796 <main+0x56>
 79e:	00 c0       	rjmp	.+0      	; 0x7a0 <main+0x60>
 7a0:	00 00       	nop
	
        _delay_ms(200);
        
	/// INIT Devices ///////////////////////////////////////////
	// INIT display
		LCD_INIT(&frontLCD);
 7a2:	ce 01       	movw	r24, r28
 7a4:	01 96       	adiw	r24, 0x01	; 1
 7a6:	d5 de       	rcall	.-598    	; 0x552 <LCD_INIT>
		LCD_CLEAR(&frontLCD);
 7a8:	ce 01       	movw	r24, r28
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	41 de       	rcall	.-894    	; 0x430 <LCD_CLEAR>
	
        
        
        
        // PWM
        DDRB |= Pin(PB1) | Pin(PB2) ;
 7ae:	87 b3       	in	r24, 0x17	; 23
 7b0:	86 60       	ori	r24, 0x06	; 6
 7b2:	87 bb       	out	0x17, r24	; 23
        ICR1 = 0;//200;
 7b4:	17 bc       	out	0x27, r1	; 39
 7b6:	16 bc       	out	0x26, r1	; 38
        OCR1A = ICR1/2;
 7b8:	86 b5       	in	r24, 0x26	; 38
 7ba:	97 b5       	in	r25, 0x27	; 39
 7bc:	96 95       	lsr	r25
 7be:	87 95       	ror	r24
 7c0:	9b bd       	out	0x2b, r25	; 43
 7c2:	8a bd       	out	0x2a, r24	; 42
        OCR1B = ICR1/2;        
 7c4:	86 b5       	in	r24, 0x26	; 38
 7c6:	97 b5       	in	r25, 0x27	; 39
 7c8:	96 95       	lsr	r25
 7ca:	87 95       	ror	r24
 7cc:	99 bd       	out	0x29, r25	; 41
 7ce:	88 bd       	out	0x28, r24	; 40
        TCCR1A = (1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (1<<COM1B0) | (1<<WGM11) | (0<<WGM10);
 7d0:	82 eb       	ldi	r24, 0xB2	; 178
 7d2:	8f bd       	out	0x2f, r24	; 47
        TCCR1B |= (1 << CS10) | (1<<WGM13) | (1<<WGM12);
 7d4:	8e b5       	in	r24, 0x2e	; 46
 7d6:	89 61       	ori	r24, 0x19	; 25
 7d8:	8e bd       	out	0x2e, r24	; 46
        
        // INT1
        MCUCR |= (1 << ISC11);    // set INT1 to trigger on postive flanc
 7da:	85 b7       	in	r24, 0x35	; 53
 7dc:	88 60       	ori	r24, 0x08	; 8
 7de:	85 bf       	out	0x35, r24	; 53
        GICR |= (1 << INT1);      // Turns on INT0
 7e0:	8b b7       	in	r24, 0x3b	; 59
 7e2:	80 68       	ori	r24, 0x80	; 128
 7e4:	8b bf       	out	0x3b, r24	; 59
        sei();                    // turn on interrupts
 7e6:	78 94       	sei

        // TIMER0
        TCCR0 |= (0 << CS02) | (0 << CS01) | (1 << CS00);
 7e8:	83 b7       	in	r24, 0x33	; 51
 7ea:	81 60       	ori	r24, 0x01	; 1
 7ec:	83 bf       	out	0x33, r24	; 51
        TCNT0 = 0;
 7ee:	12 be       	out	0x32, r1	; 50
        {
                ICR1 = 0;
                _delay_ms(100);
                uint16_t myCtr = 0;
                Receiveing40KHz = False;
                ICR1 = 200;
 7f0:	48 ec       	ldi	r20, 0xC8	; 200
 7f2:	e4 2e       	mov	r14, r20
 7f4:	f1 2c       	mov	r15, r1
        TCCR0 |= (0 << CS02) | (0 << CS01) | (1 << CS00);
        TCNT0 = 0;
        
        while(1)
        {
                ICR1 = 0;
 7f6:	17 bc       	out	0x27, r1	; 39
 7f8:	16 bc       	out	0x26, r1	; 38
 7fa:	2f ef       	ldi	r18, 0xFF	; 255
 7fc:	80 e7       	ldi	r24, 0x70	; 112
 7fe:	92 e0       	ldi	r25, 0x02	; 2
 800:	21 50       	subi	r18, 0x01	; 1
 802:	80 40       	sbci	r24, 0x00	; 0
 804:	90 40       	sbci	r25, 0x00	; 0
 806:	e1 f7       	brne	.-8      	; 0x800 <main+0xc0>
 808:	00 c0       	rjmp	.+0      	; 0x80a <main+0xca>
 80a:	00 00       	nop
                _delay_ms(100);
                uint16_t myCtr = 0;
                Receiveing40KHz = False;
 80c:	10 92 67 00 	sts	0x0067, r1
                ICR1 = 200;
 810:	f7 bc       	out	0x27, r15	; 39
 812:	e6 bc       	out	0x26, r14	; 38
        
        while(1)
        {
                ICR1 = 0;
                _delay_ms(100);
                uint16_t myCtr = 0;
 814:	00 e0       	ldi	r16, 0x00	; 0
 816:	10 e0       	ldi	r17, 0x00	; 0
                Receiveing40KHz = False;
                ICR1 = 200;
                while(Receiveing40KHz == False)
 818:	80 91 67 00 	lds	r24, 0x0067
 81c:	81 11       	cpse	r24, r1
 81e:	07 c0       	rjmp	.+14     	; 0x82e <main+0xee>
                {
                        myCtr++;
 820:	0f 5f       	subi	r16, 0xFF	; 255
 822:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 824:	2a e1       	ldi	r18, 0x1A	; 26
 826:	2a 95       	dec	r18
 828:	f1 f7       	brne	.-4      	; 0x826 <main+0xe6>
 82a:	00 c0       	rjmp	.+0      	; 0x82c <main+0xec>
 82c:	f5 cf       	rjmp	.-22     	; 0x818 <main+0xd8>
                        _delay_us(10);
                }
                ICR1 = 0;
 82e:	17 bc       	out	0x27, r1	; 39
 830:	16 bc       	out	0x26, r1	; 38
                LCD_POS(&frontLCD, 0, 0);
 832:	40 e0       	ldi	r20, 0x00	; 0
 834:	60 e0       	ldi	r22, 0x00	; 0
 836:	ce 01       	movw	r24, r28
 838:	01 96       	adiw	r24, 0x01	; 1
 83a:	00 de       	rcall	.-1024   	; 0x43c <LCD_POS>
                LCD_INT(&frontLCD, myCtr);
 83c:	b8 01       	movw	r22, r16
 83e:	ce 01       	movw	r24, r28
 840:	01 96       	adiw	r24, 0x01	; 1
 842:	26 de       	rcall	.-948    	; 0x490 <LCD_INT>
                LCD_STRING(&frontLCD, "    ");
 844:	60 e6       	ldi	r22, 0x60	; 96
 846:	70 e0       	ldi	r23, 0x00	; 0
 848:	ce 01       	movw	r24, r28
 84a:	01 96       	adiw	r24, 0x01	; 1
 84c:	df dd       	rcall	.-1090   	; 0x40c <LCD_STRING>
                //        LCD_STRING(&frontLCD, "yes ");
                //else
                //        LCD_STRING(&frontLCD, "no  ");
                //LCD_INT(&frontLCD, tmp);
                //LCD_STRING(&frontLCD, "    ");
        }
 84e:	d3 cf       	rjmp	.-90     	; 0x7f6 <main+0xb6>

00000850 <dtostrf>:
 850:	ef 92       	push	r14
 852:	0f 93       	push	r16
 854:	1f 93       	push	r17
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	e8 01       	movw	r28, r16
 85c:	47 fd       	sbrc	r20, 7
 85e:	02 c0       	rjmp	.+4      	; 0x864 <dtostrf+0x14>
 860:	34 e0       	ldi	r19, 0x04	; 4
 862:	01 c0       	rjmp	.+2      	; 0x866 <dtostrf+0x16>
 864:	34 e1       	ldi	r19, 0x14	; 20
 866:	e4 2f       	mov	r30, r20
 868:	ff 27       	eor	r31, r31
 86a:	e7 fd       	sbrc	r30, 7
 86c:	f0 95       	com	r31
 86e:	f7 ff       	sbrs	r31, 7
 870:	03 c0       	rjmp	.+6      	; 0x878 <dtostrf+0x28>
 872:	f1 95       	neg	r31
 874:	e1 95       	neg	r30
 876:	f1 09       	sbc	r31, r1
 878:	e3 2e       	mov	r14, r19
 87a:	02 2f       	mov	r16, r18
 87c:	2e 2f       	mov	r18, r30
 87e:	ae 01       	movw	r20, r28
 880:	34 d0       	rcall	.+104    	; 0x8ea <dtoa_prf>
 882:	ce 01       	movw	r24, r28
 884:	df 91       	pop	r29
 886:	cf 91       	pop	r28
 888:	1f 91       	pop	r17
 88a:	0f 91       	pop	r16
 88c:	ef 90       	pop	r14
 88e:	08 95       	ret

00000890 <itoa>:
 890:	45 32       	cpi	r20, 0x25	; 37
 892:	51 05       	cpc	r21, r1
 894:	18 f4       	brcc	.+6      	; 0x89c <itoa+0xc>
 896:	42 30       	cpi	r20, 0x02	; 2
 898:	08 f0       	brcs	.+2      	; 0x89c <itoa+0xc>
 89a:	04 c0       	rjmp	.+8      	; 0x8a4 <__itoa_ncheck>
 89c:	fb 01       	movw	r30, r22
 89e:	10 82       	st	Z, r1
 8a0:	cb 01       	movw	r24, r22
 8a2:	08 95       	ret

000008a4 <__itoa_ncheck>:
 8a4:	bb 27       	eor	r27, r27
 8a6:	4a 30       	cpi	r20, 0x0A	; 10
 8a8:	31 f4       	brne	.+12     	; 0x8b6 <__itoa_ncheck+0x12>
 8aa:	99 23       	and	r25, r25
 8ac:	22 f4       	brpl	.+8      	; 0x8b6 <__itoa_ncheck+0x12>
 8ae:	bd e2       	ldi	r27, 0x2D	; 45
 8b0:	90 95       	com	r25
 8b2:	81 95       	neg	r24
 8b4:	9f 4f       	sbci	r25, 0xFF	; 255
 8b6:	01 c0       	rjmp	.+2      	; 0x8ba <__utoa_common>

000008b8 <__utoa_ncheck>:
 8b8:	bb 27       	eor	r27, r27

000008ba <__utoa_common>:
 8ba:	fb 01       	movw	r30, r22
 8bc:	55 27       	eor	r21, r21
 8be:	aa 27       	eor	r26, r26
 8c0:	88 0f       	add	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	aa 1f       	adc	r26, r26
 8c6:	a4 17       	cp	r26, r20
 8c8:	10 f0       	brcs	.+4      	; 0x8ce <__utoa_common+0x14>
 8ca:	a4 1b       	sub	r26, r20
 8cc:	83 95       	inc	r24
 8ce:	50 51       	subi	r21, 0x10	; 16
 8d0:	b9 f7       	brne	.-18     	; 0x8c0 <__utoa_common+0x6>
 8d2:	a0 5d       	subi	r26, 0xD0	; 208
 8d4:	aa 33       	cpi	r26, 0x3A	; 58
 8d6:	08 f0       	brcs	.+2      	; 0x8da <__utoa_common+0x20>
 8d8:	a9 5d       	subi	r26, 0xD9	; 217
 8da:	a1 93       	st	Z+, r26
 8dc:	00 97       	sbiw	r24, 0x00	; 0
 8de:	79 f7       	brne	.-34     	; 0x8be <__utoa_common+0x4>
 8e0:	b1 11       	cpse	r27, r1
 8e2:	b1 93       	st	Z+, r27
 8e4:	11 92       	st	Z+, r1
 8e6:	cb 01       	movw	r24, r22
 8e8:	65 c2       	rjmp	.+1226   	; 0xdb4 <strrev>

000008ea <dtoa_prf>:
 8ea:	4f 92       	push	r4
 8ec:	5f 92       	push	r5
 8ee:	6f 92       	push	r6
 8f0:	7f 92       	push	r7
 8f2:	9f 92       	push	r9
 8f4:	af 92       	push	r10
 8f6:	bf 92       	push	r11
 8f8:	cf 92       	push	r12
 8fa:	df 92       	push	r13
 8fc:	ef 92       	push	r14
 8fe:	ff 92       	push	r15
 900:	0f 93       	push	r16
 902:	1f 93       	push	r17
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	cd b7       	in	r28, 0x3d	; 61
 90a:	de b7       	in	r29, 0x3e	; 62
 90c:	29 97       	sbiw	r28, 0x09	; 9
 90e:	0f b6       	in	r0, 0x3f	; 63
 910:	f8 94       	cli
 912:	de bf       	out	0x3e, r29	; 62
 914:	0f be       	out	0x3f, r0	; 63
 916:	cd bf       	out	0x3d, r28	; 61
 918:	6a 01       	movw	r12, r20
 91a:	12 2f       	mov	r17, r18
 91c:	b0 2e       	mov	r11, r16
 91e:	2b e3       	ldi	r18, 0x3B	; 59
 920:	20 17       	cp	r18, r16
 922:	20 f0       	brcs	.+8      	; 0x92c <dtoa_prf+0x42>
 924:	ff 24       	eor	r15, r15
 926:	f3 94       	inc	r15
 928:	f0 0e       	add	r15, r16
 92a:	02 c0       	rjmp	.+4      	; 0x930 <dtoa_prf+0x46>
 92c:	bc e3       	ldi	r27, 0x3C	; 60
 92e:	fb 2e       	mov	r15, r27
 930:	0f 2d       	mov	r16, r15
 932:	27 e0       	ldi	r18, 0x07	; 7
 934:	ae 01       	movw	r20, r28
 936:	4f 5f       	subi	r20, 0xFF	; 255
 938:	5f 4f       	sbci	r21, 0xFF	; 255
 93a:	64 d1       	rcall	.+712    	; 0xc04 <__ftoa_engine>
 93c:	ac 01       	movw	r20, r24
 93e:	89 81       	ldd	r24, Y+1	; 0x01
 940:	98 2f       	mov	r25, r24
 942:	99 70       	andi	r25, 0x09	; 9
 944:	91 30       	cpi	r25, 0x01	; 1
 946:	31 f0       	breq	.+12     	; 0x954 <dtoa_prf+0x6a>
 948:	e1 fc       	sbrc	r14, 1
 94a:	06 c0       	rjmp	.+12     	; 0x958 <dtoa_prf+0x6e>
 94c:	e0 fe       	sbrs	r14, 0
 94e:	06 c0       	rjmp	.+12     	; 0x95c <dtoa_prf+0x72>
 950:	90 e2       	ldi	r25, 0x20	; 32
 952:	05 c0       	rjmp	.+10     	; 0x95e <dtoa_prf+0x74>
 954:	9d e2       	ldi	r25, 0x2D	; 45
 956:	03 c0       	rjmp	.+6      	; 0x95e <dtoa_prf+0x74>
 958:	9b e2       	ldi	r25, 0x2B	; 43
 95a:	01 c0       	rjmp	.+2      	; 0x95e <dtoa_prf+0x74>
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	ee 2d       	mov	r30, r14
 960:	e0 71       	andi	r30, 0x10	; 16
 962:	83 ff       	sbrs	r24, 3
 964:	3c c0       	rjmp	.+120    	; 0x9de <dtoa_prf+0xf4>
 966:	91 11       	cpse	r25, r1
 968:	02 c0       	rjmp	.+4      	; 0x96e <dtoa_prf+0x84>
 96a:	83 e0       	ldi	r24, 0x03	; 3
 96c:	01 c0       	rjmp	.+2      	; 0x970 <dtoa_prf+0x86>
 96e:	84 e0       	ldi	r24, 0x04	; 4
 970:	81 17       	cp	r24, r17
 972:	18 f4       	brcc	.+6      	; 0x97a <dtoa_prf+0x90>
 974:	21 2f       	mov	r18, r17
 976:	28 1b       	sub	r18, r24
 978:	01 c0       	rjmp	.+2      	; 0x97c <dtoa_prf+0x92>
 97a:	20 e0       	ldi	r18, 0x00	; 0
 97c:	e1 11       	cpse	r30, r1
 97e:	0b c0       	rjmp	.+22     	; 0x996 <dtoa_prf+0xac>
 980:	f6 01       	movw	r30, r12
 982:	82 2f       	mov	r24, r18
 984:	30 e2       	ldi	r19, 0x20	; 32
 986:	88 23       	and	r24, r24
 988:	19 f0       	breq	.+6      	; 0x990 <dtoa_prf+0xa6>
 98a:	31 93       	st	Z+, r19
 98c:	81 50       	subi	r24, 0x01	; 1
 98e:	fb cf       	rjmp	.-10     	; 0x986 <dtoa_prf+0x9c>
 990:	c2 0e       	add	r12, r18
 992:	d1 1c       	adc	r13, r1
 994:	20 e0       	ldi	r18, 0x00	; 0
 996:	99 23       	and	r25, r25
 998:	29 f0       	breq	.+10     	; 0x9a4 <dtoa_prf+0xba>
 99a:	d6 01       	movw	r26, r12
 99c:	9c 93       	st	X, r25
 99e:	f6 01       	movw	r30, r12
 9a0:	31 96       	adiw	r30, 0x01	; 1
 9a2:	6f 01       	movw	r12, r30
 9a4:	c6 01       	movw	r24, r12
 9a6:	03 96       	adiw	r24, 0x03	; 3
 9a8:	e2 fe       	sbrs	r14, 2
 9aa:	0a c0       	rjmp	.+20     	; 0x9c0 <dtoa_prf+0xd6>
 9ac:	3e e4       	ldi	r19, 0x4E	; 78
 9ae:	d6 01       	movw	r26, r12
 9b0:	3c 93       	st	X, r19
 9b2:	41 e4       	ldi	r20, 0x41	; 65
 9b4:	11 96       	adiw	r26, 0x01	; 1
 9b6:	4c 93       	st	X, r20
 9b8:	11 97       	sbiw	r26, 0x01	; 1
 9ba:	12 96       	adiw	r26, 0x02	; 2
 9bc:	3c 93       	st	X, r19
 9be:	06 c0       	rjmp	.+12     	; 0x9cc <dtoa_prf+0xe2>
 9c0:	3e e6       	ldi	r19, 0x6E	; 110
 9c2:	f6 01       	movw	r30, r12
 9c4:	30 83       	st	Z, r19
 9c6:	41 e6       	ldi	r20, 0x61	; 97
 9c8:	41 83       	std	Z+1, r20	; 0x01
 9ca:	32 83       	std	Z+2, r19	; 0x02
 9cc:	fc 01       	movw	r30, r24
 9ce:	32 2f       	mov	r19, r18
 9d0:	40 e2       	ldi	r20, 0x20	; 32
 9d2:	33 23       	and	r19, r19
 9d4:	09 f4       	brne	.+2      	; 0x9d8 <dtoa_prf+0xee>
 9d6:	42 c0       	rjmp	.+132    	; 0xa5c <dtoa_prf+0x172>
 9d8:	41 93       	st	Z+, r20
 9da:	31 50       	subi	r19, 0x01	; 1
 9dc:	fa cf       	rjmp	.-12     	; 0x9d2 <dtoa_prf+0xe8>
 9de:	82 ff       	sbrs	r24, 2
 9e0:	44 c0       	rjmp	.+136    	; 0xa6a <dtoa_prf+0x180>
 9e2:	91 11       	cpse	r25, r1
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <dtoa_prf+0x100>
 9e6:	83 e0       	ldi	r24, 0x03	; 3
 9e8:	01 c0       	rjmp	.+2      	; 0x9ec <dtoa_prf+0x102>
 9ea:	84 e0       	ldi	r24, 0x04	; 4
 9ec:	81 17       	cp	r24, r17
 9ee:	18 f4       	brcc	.+6      	; 0x9f6 <dtoa_prf+0x10c>
 9f0:	21 2f       	mov	r18, r17
 9f2:	28 1b       	sub	r18, r24
 9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <dtoa_prf+0x10e>
 9f6:	20 e0       	ldi	r18, 0x00	; 0
 9f8:	e1 11       	cpse	r30, r1
 9fa:	0b c0       	rjmp	.+22     	; 0xa12 <dtoa_prf+0x128>
 9fc:	f6 01       	movw	r30, r12
 9fe:	82 2f       	mov	r24, r18
 a00:	30 e2       	ldi	r19, 0x20	; 32
 a02:	88 23       	and	r24, r24
 a04:	19 f0       	breq	.+6      	; 0xa0c <dtoa_prf+0x122>
 a06:	31 93       	st	Z+, r19
 a08:	81 50       	subi	r24, 0x01	; 1
 a0a:	fb cf       	rjmp	.-10     	; 0xa02 <dtoa_prf+0x118>
 a0c:	c2 0e       	add	r12, r18
 a0e:	d1 1c       	adc	r13, r1
 a10:	20 e0       	ldi	r18, 0x00	; 0
 a12:	99 23       	and	r25, r25
 a14:	29 f0       	breq	.+10     	; 0xa20 <dtoa_prf+0x136>
 a16:	d6 01       	movw	r26, r12
 a18:	9c 93       	st	X, r25
 a1a:	f6 01       	movw	r30, r12
 a1c:	31 96       	adiw	r30, 0x01	; 1
 a1e:	6f 01       	movw	r12, r30
 a20:	c6 01       	movw	r24, r12
 a22:	03 96       	adiw	r24, 0x03	; 3
 a24:	e2 fe       	sbrs	r14, 2
 a26:	0b c0       	rjmp	.+22     	; 0xa3e <dtoa_prf+0x154>
 a28:	39 e4       	ldi	r19, 0x49	; 73
 a2a:	d6 01       	movw	r26, r12
 a2c:	3c 93       	st	X, r19
 a2e:	3e e4       	ldi	r19, 0x4E	; 78
 a30:	11 96       	adiw	r26, 0x01	; 1
 a32:	3c 93       	st	X, r19
 a34:	11 97       	sbiw	r26, 0x01	; 1
 a36:	36 e4       	ldi	r19, 0x46	; 70
 a38:	12 96       	adiw	r26, 0x02	; 2
 a3a:	3c 93       	st	X, r19
 a3c:	07 c0       	rjmp	.+14     	; 0xa4c <dtoa_prf+0x162>
 a3e:	39 e6       	ldi	r19, 0x69	; 105
 a40:	f6 01       	movw	r30, r12
 a42:	30 83       	st	Z, r19
 a44:	3e e6       	ldi	r19, 0x6E	; 110
 a46:	31 83       	std	Z+1, r19	; 0x01
 a48:	36 e6       	ldi	r19, 0x66	; 102
 a4a:	32 83       	std	Z+2, r19	; 0x02
 a4c:	fc 01       	movw	r30, r24
 a4e:	32 2f       	mov	r19, r18
 a50:	40 e2       	ldi	r20, 0x20	; 32
 a52:	33 23       	and	r19, r19
 a54:	19 f0       	breq	.+6      	; 0xa5c <dtoa_prf+0x172>
 a56:	41 93       	st	Z+, r20
 a58:	31 50       	subi	r19, 0x01	; 1
 a5a:	fb cf       	rjmp	.-10     	; 0xa52 <dtoa_prf+0x168>
 a5c:	fc 01       	movw	r30, r24
 a5e:	e2 0f       	add	r30, r18
 a60:	f1 1d       	adc	r31, r1
 a62:	10 82       	st	Z, r1
 a64:	8e ef       	ldi	r24, 0xFE	; 254
 a66:	9f ef       	ldi	r25, 0xFF	; 255
 a68:	b7 c0       	rjmp	.+366    	; 0xbd8 <dtoa_prf+0x2ee>
 a6a:	f1 e0       	ldi	r31, 0x01	; 1
 a6c:	91 11       	cpse	r25, r1
 a6e:	01 c0       	rjmp	.+2      	; 0xa72 <dtoa_prf+0x188>
 a70:	f0 e0       	ldi	r31, 0x00	; 0
 a72:	6f 2f       	mov	r22, r31
 a74:	70 e0       	ldi	r23, 0x00	; 0
 a76:	14 16       	cp	r1, r20
 a78:	15 06       	cpc	r1, r21
 a7a:	24 f4       	brge	.+8      	; 0xa84 <dtoa_prf+0x19a>
 a7c:	9a 01       	movw	r18, r20
 a7e:	2f 5f       	subi	r18, 0xFF	; 255
 a80:	3f 4f       	sbci	r19, 0xFF	; 255
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <dtoa_prf+0x19e>
 a84:	21 e0       	ldi	r18, 0x01	; 1
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	26 0f       	add	r18, r22
 a8a:	37 1f       	adc	r19, r23
 a8c:	bb 20       	and	r11, r11
 a8e:	29 f0       	breq	.+10     	; 0xa9a <dtoa_prf+0x1b0>
 a90:	6b 2d       	mov	r22, r11
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	6f 5f       	subi	r22, 0xFF	; 255
 a96:	7f 4f       	sbci	r23, 0xFF	; 255
 a98:	02 c0       	rjmp	.+4      	; 0xa9e <dtoa_prf+0x1b4>
 a9a:	60 e0       	ldi	r22, 0x00	; 0
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	26 0f       	add	r18, r22
 aa0:	37 1f       	adc	r19, r23
 aa2:	61 2f       	mov	r22, r17
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	26 17       	cp	r18, r22
 aa8:	37 07       	cpc	r19, r23
 aaa:	1c f4       	brge	.+6      	; 0xab2 <dtoa_prf+0x1c8>
 aac:	12 1b       	sub	r17, r18
 aae:	21 2f       	mov	r18, r17
 ab0:	01 c0       	rjmp	.+2      	; 0xab4 <dtoa_prf+0x1ca>
 ab2:	20 e0       	ldi	r18, 0x00	; 0
 ab4:	3e 2d       	mov	r19, r14
 ab6:	38 71       	andi	r19, 0x18	; 24
 ab8:	59 f4       	brne	.+22     	; 0xad0 <dtoa_prf+0x1e6>
 aba:	d6 01       	movw	r26, r12
 abc:	32 2f       	mov	r19, r18
 abe:	60 e2       	ldi	r22, 0x20	; 32
 ac0:	33 23       	and	r19, r19
 ac2:	19 f0       	breq	.+6      	; 0xaca <dtoa_prf+0x1e0>
 ac4:	6d 93       	st	X+, r22
 ac6:	31 50       	subi	r19, 0x01	; 1
 ac8:	fb cf       	rjmp	.-10     	; 0xac0 <dtoa_prf+0x1d6>
 aca:	c2 0e       	add	r12, r18
 acc:	d1 1c       	adc	r13, r1
 ace:	20 e0       	ldi	r18, 0x00	; 0
 ad0:	ff 23       	and	r31, r31
 ad2:	31 f0       	breq	.+12     	; 0xae0 <dtoa_prf+0x1f6>
 ad4:	d6 01       	movw	r26, r12
 ad6:	9c 93       	st	X, r25
 ad8:	b6 01       	movw	r22, r12
 ada:	6f 5f       	subi	r22, 0xFF	; 255
 adc:	7f 4f       	sbci	r23, 0xFF	; 255
 ade:	6b 01       	movw	r12, r22
 ae0:	e1 11       	cpse	r30, r1
 ae2:	0b c0       	rjmp	.+22     	; 0xafa <dtoa_prf+0x210>
 ae4:	f6 01       	movw	r30, r12
 ae6:	92 2f       	mov	r25, r18
 ae8:	30 e3       	ldi	r19, 0x30	; 48
 aea:	99 23       	and	r25, r25
 aec:	19 f0       	breq	.+6      	; 0xaf4 <dtoa_prf+0x20a>
 aee:	31 93       	st	Z+, r19
 af0:	91 50       	subi	r25, 0x01	; 1
 af2:	fb cf       	rjmp	.-10     	; 0xaea <dtoa_prf+0x200>
 af4:	c2 0e       	add	r12, r18
 af6:	d1 1c       	adc	r13, r1
 af8:	20 e0       	ldi	r18, 0x00	; 0
 afa:	9f 2d       	mov	r25, r15
 afc:	94 0f       	add	r25, r20
 afe:	3a 81       	ldd	r19, Y+2	; 0x02
 b00:	78 2f       	mov	r23, r24
 b02:	70 71       	andi	r23, 0x10	; 16
 b04:	a7 2e       	mov	r10, r23
 b06:	84 ff       	sbrs	r24, 4
 b08:	03 c0       	rjmp	.+6      	; 0xb10 <dtoa_prf+0x226>
 b0a:	31 33       	cpi	r19, 0x31	; 49
 b0c:	09 f4       	brne	.+2      	; 0xb10 <dtoa_prf+0x226>
 b0e:	91 50       	subi	r25, 0x01	; 1
 b10:	19 16       	cp	r1, r25
 b12:	24 f4       	brge	.+8      	; 0xb1c <dtoa_prf+0x232>
 b14:	99 30       	cpi	r25, 0x09	; 9
 b16:	18 f0       	brcs	.+6      	; 0xb1e <dtoa_prf+0x234>
 b18:	98 e0       	ldi	r25, 0x08	; 8
 b1a:	01 c0       	rjmp	.+2      	; 0xb1e <dtoa_prf+0x234>
 b1c:	91 e0       	ldi	r25, 0x01	; 1
 b1e:	e4 2f       	mov	r30, r20
 b20:	85 2f       	mov	r24, r21
 b22:	57 ff       	sbrs	r21, 7
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <dtoa_prf+0x240>
 b26:	e0 e0       	ldi	r30, 0x00	; 0
 b28:	80 e0       	ldi	r24, 0x00	; 0
 b2a:	6e 2f       	mov	r22, r30
 b2c:	78 2f       	mov	r23, r24
 b2e:	e0 e0       	ldi	r30, 0x00	; 0
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	ae e2       	ldi	r26, 0x2E	; 46
 b34:	9a 2e       	mov	r9, r26
 b36:	3a 01       	movw	r6, r20
 b38:	69 1a       	sub	r6, r25
 b3a:	71 08       	sbc	r7, r1
 b3c:	2a 01       	movw	r4, r20
 b3e:	46 1a       	sub	r4, r22
 b40:	57 0a       	sbc	r5, r23
 b42:	0b 2d       	mov	r16, r11
 b44:	10 e0       	ldi	r17, 0x00	; 0
 b46:	11 95       	neg	r17
 b48:	01 95       	neg	r16
 b4a:	11 09       	sbc	r17, r1
 b4c:	6f 3f       	cpi	r22, 0xFF	; 255
 b4e:	8f ef       	ldi	r24, 0xFF	; 255
 b50:	78 07       	cpc	r23, r24
 b52:	29 f4       	brne	.+10     	; 0xb5e <dtoa_prf+0x274>
 b54:	d6 01       	movw	r26, r12
 b56:	9c 92       	st	X, r9
 b58:	c6 01       	movw	r24, r12
 b5a:	01 96       	adiw	r24, 0x01	; 1
 b5c:	6c 01       	movw	r12, r24
 b5e:	46 17       	cp	r20, r22
 b60:	57 07       	cpc	r21, r23
 b62:	84 f0       	brlt	.+32     	; 0xb84 <dtoa_prf+0x29a>
 b64:	66 16       	cp	r6, r22
 b66:	77 06       	cpc	r7, r23
 b68:	6c f4       	brge	.+26     	; 0xb84 <dtoa_prf+0x29a>
 b6a:	7f 01       	movw	r14, r30
 b6c:	e4 0c       	add	r14, r4
 b6e:	f5 1c       	adc	r15, r5
 b70:	a1 e0       	ldi	r26, 0x01	; 1
 b72:	b0 e0       	ldi	r27, 0x00	; 0
 b74:	ac 0f       	add	r26, r28
 b76:	bd 1f       	adc	r27, r29
 b78:	ea 0e       	add	r14, r26
 b7a:	fb 1e       	adc	r15, r27
 b7c:	d7 01       	movw	r26, r14
 b7e:	11 96       	adiw	r26, 0x01	; 1
 b80:	bc 90       	ld	r11, X
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <dtoa_prf+0x29e>
 b84:	90 e3       	ldi	r25, 0x30	; 48
 b86:	b9 2e       	mov	r11, r25
 b88:	61 50       	subi	r22, 0x01	; 1
 b8a:	71 09       	sbc	r23, r1
 b8c:	31 96       	adiw	r30, 0x01	; 1
 b8e:	c6 01       	movw	r24, r12
 b90:	01 96       	adiw	r24, 0x01	; 1
 b92:	7c 01       	movw	r14, r24
 b94:	60 17       	cp	r22, r16
 b96:	71 07       	cpc	r23, r17
 b98:	24 f0       	brlt	.+8      	; 0xba2 <dtoa_prf+0x2b8>
 b9a:	d6 01       	movw	r26, r12
 b9c:	bc 92       	st	X, r11
 b9e:	6c 01       	movw	r12, r24
 ba0:	d5 cf       	rjmp	.-86     	; 0xb4c <dtoa_prf+0x262>
 ba2:	64 17       	cp	r22, r20
 ba4:	75 07       	cpc	r23, r21
 ba6:	41 f4       	brne	.+16     	; 0xbb8 <dtoa_prf+0x2ce>
 ba8:	36 33       	cpi	r19, 0x36	; 54
 baa:	20 f4       	brcc	.+8      	; 0xbb4 <dtoa_prf+0x2ca>
 bac:	35 33       	cpi	r19, 0x35	; 53
 bae:	21 f4       	brne	.+8      	; 0xbb8 <dtoa_prf+0x2ce>
 bb0:	a1 10       	cpse	r10, r1
 bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <dtoa_prf+0x2ce>
 bb4:	81 e3       	ldi	r24, 0x31	; 49
 bb6:	b8 2e       	mov	r11, r24
 bb8:	f6 01       	movw	r30, r12
 bba:	b0 82       	st	Z, r11
 bbc:	f7 01       	movw	r30, r14
 bbe:	82 2f       	mov	r24, r18
 bc0:	90 e2       	ldi	r25, 0x20	; 32
 bc2:	88 23       	and	r24, r24
 bc4:	19 f0       	breq	.+6      	; 0xbcc <dtoa_prf+0x2e2>
 bc6:	91 93       	st	Z+, r25
 bc8:	81 50       	subi	r24, 0x01	; 1
 bca:	fb cf       	rjmp	.-10     	; 0xbc2 <dtoa_prf+0x2d8>
 bcc:	f7 01       	movw	r30, r14
 bce:	e2 0f       	add	r30, r18
 bd0:	f1 1d       	adc	r31, r1
 bd2:	10 82       	st	Z, r1
 bd4:	80 e0       	ldi	r24, 0x00	; 0
 bd6:	90 e0       	ldi	r25, 0x00	; 0
 bd8:	29 96       	adiw	r28, 0x09	; 9
 bda:	0f b6       	in	r0, 0x3f	; 63
 bdc:	f8 94       	cli
 bde:	de bf       	out	0x3e, r29	; 62
 be0:	0f be       	out	0x3f, r0	; 63
 be2:	cd bf       	out	0x3d, r28	; 61
 be4:	df 91       	pop	r29
 be6:	cf 91       	pop	r28
 be8:	1f 91       	pop	r17
 bea:	0f 91       	pop	r16
 bec:	ff 90       	pop	r15
 bee:	ef 90       	pop	r14
 bf0:	df 90       	pop	r13
 bf2:	cf 90       	pop	r12
 bf4:	bf 90       	pop	r11
 bf6:	af 90       	pop	r10
 bf8:	9f 90       	pop	r9
 bfa:	7f 90       	pop	r7
 bfc:	6f 90       	pop	r6
 bfe:	5f 90       	pop	r5
 c00:	4f 90       	pop	r4
 c02:	08 95       	ret

00000c04 <__ftoa_engine>:
 c04:	28 30       	cpi	r18, 0x08	; 8
 c06:	08 f0       	brcs	.+2      	; 0xc0a <__ftoa_engine+0x6>
 c08:	27 e0       	ldi	r18, 0x07	; 7
 c0a:	33 27       	eor	r19, r19
 c0c:	da 01       	movw	r26, r20
 c0e:	99 0f       	add	r25, r25
 c10:	31 1d       	adc	r19, r1
 c12:	87 fd       	sbrc	r24, 7
 c14:	91 60       	ori	r25, 0x01	; 1
 c16:	00 96       	adiw	r24, 0x00	; 0
 c18:	61 05       	cpc	r22, r1
 c1a:	71 05       	cpc	r23, r1
 c1c:	39 f4       	brne	.+14     	; 0xc2c <__ftoa_engine+0x28>
 c1e:	32 60       	ori	r19, 0x02	; 2
 c20:	2e 5f       	subi	r18, 0xFE	; 254
 c22:	3d 93       	st	X+, r19
 c24:	30 e3       	ldi	r19, 0x30	; 48
 c26:	2a 95       	dec	r18
 c28:	e1 f7       	brne	.-8      	; 0xc22 <__ftoa_engine+0x1e>
 c2a:	08 95       	ret
 c2c:	9f 3f       	cpi	r25, 0xFF	; 255
 c2e:	30 f0       	brcs	.+12     	; 0xc3c <__ftoa_engine+0x38>
 c30:	80 38       	cpi	r24, 0x80	; 128
 c32:	71 05       	cpc	r23, r1
 c34:	61 05       	cpc	r22, r1
 c36:	09 f0       	breq	.+2      	; 0xc3a <__ftoa_engine+0x36>
 c38:	3c 5f       	subi	r19, 0xFC	; 252
 c3a:	3c 5f       	subi	r19, 0xFC	; 252
 c3c:	3d 93       	st	X+, r19
 c3e:	91 30       	cpi	r25, 0x01	; 1
 c40:	08 f0       	brcs	.+2      	; 0xc44 <__ftoa_engine+0x40>
 c42:	80 68       	ori	r24, 0x80	; 128
 c44:	91 1d       	adc	r25, r1
 c46:	df 93       	push	r29
 c48:	cf 93       	push	r28
 c4a:	1f 93       	push	r17
 c4c:	0f 93       	push	r16
 c4e:	ff 92       	push	r15
 c50:	ef 92       	push	r14
 c52:	19 2f       	mov	r17, r25
 c54:	98 7f       	andi	r25, 0xF8	; 248
 c56:	96 95       	lsr	r25
 c58:	e9 2f       	mov	r30, r25
 c5a:	96 95       	lsr	r25
 c5c:	96 95       	lsr	r25
 c5e:	e9 0f       	add	r30, r25
 c60:	ff 27       	eor	r31, r31
 c62:	e0 58       	subi	r30, 0x80	; 128
 c64:	ff 4f       	sbci	r31, 0xFF	; 255
 c66:	99 27       	eor	r25, r25
 c68:	33 27       	eor	r19, r19
 c6a:	ee 24       	eor	r14, r14
 c6c:	ff 24       	eor	r15, r15
 c6e:	a7 01       	movw	r20, r14
 c70:	e7 01       	movw	r28, r14
 c72:	05 90       	lpm	r0, Z+
 c74:	08 94       	sec
 c76:	07 94       	ror	r0
 c78:	28 f4       	brcc	.+10     	; 0xc84 <__ftoa_engine+0x80>
 c7a:	36 0f       	add	r19, r22
 c7c:	e7 1e       	adc	r14, r23
 c7e:	f8 1e       	adc	r15, r24
 c80:	49 1f       	adc	r20, r25
 c82:	51 1d       	adc	r21, r1
 c84:	66 0f       	add	r22, r22
 c86:	77 1f       	adc	r23, r23
 c88:	88 1f       	adc	r24, r24
 c8a:	99 1f       	adc	r25, r25
 c8c:	06 94       	lsr	r0
 c8e:	a1 f7       	brne	.-24     	; 0xc78 <__ftoa_engine+0x74>
 c90:	05 90       	lpm	r0, Z+
 c92:	07 94       	ror	r0
 c94:	28 f4       	brcc	.+10     	; 0xca0 <__ftoa_engine+0x9c>
 c96:	e7 0e       	add	r14, r23
 c98:	f8 1e       	adc	r15, r24
 c9a:	49 1f       	adc	r20, r25
 c9c:	56 1f       	adc	r21, r22
 c9e:	c1 1d       	adc	r28, r1
 ca0:	77 0f       	add	r23, r23
 ca2:	88 1f       	adc	r24, r24
 ca4:	99 1f       	adc	r25, r25
 ca6:	66 1f       	adc	r22, r22
 ca8:	06 94       	lsr	r0
 caa:	a1 f7       	brne	.-24     	; 0xc94 <__ftoa_engine+0x90>
 cac:	05 90       	lpm	r0, Z+
 cae:	07 94       	ror	r0
 cb0:	28 f4       	brcc	.+10     	; 0xcbc <__ftoa_engine+0xb8>
 cb2:	f8 0e       	add	r15, r24
 cb4:	49 1f       	adc	r20, r25
 cb6:	56 1f       	adc	r21, r22
 cb8:	c7 1f       	adc	r28, r23
 cba:	d1 1d       	adc	r29, r1
 cbc:	88 0f       	add	r24, r24
 cbe:	99 1f       	adc	r25, r25
 cc0:	66 1f       	adc	r22, r22
 cc2:	77 1f       	adc	r23, r23
 cc4:	06 94       	lsr	r0
 cc6:	a1 f7       	brne	.-24     	; 0xcb0 <__ftoa_engine+0xac>
 cc8:	05 90       	lpm	r0, Z+
 cca:	07 94       	ror	r0
 ccc:	20 f4       	brcc	.+8      	; 0xcd6 <__ftoa_engine+0xd2>
 cce:	49 0f       	add	r20, r25
 cd0:	56 1f       	adc	r21, r22
 cd2:	c7 1f       	adc	r28, r23
 cd4:	d8 1f       	adc	r29, r24
 cd6:	99 0f       	add	r25, r25
 cd8:	66 1f       	adc	r22, r22
 cda:	77 1f       	adc	r23, r23
 cdc:	88 1f       	adc	r24, r24
 cde:	06 94       	lsr	r0
 ce0:	a9 f7       	brne	.-22     	; 0xccc <__ftoa_engine+0xc8>
 ce2:	84 91       	lpm	r24, Z
 ce4:	10 95       	com	r17
 ce6:	17 70       	andi	r17, 0x07	; 7
 ce8:	41 f0       	breq	.+16     	; 0xcfa <__ftoa_engine+0xf6>
 cea:	d6 95       	lsr	r29
 cec:	c7 95       	ror	r28
 cee:	57 95       	ror	r21
 cf0:	47 95       	ror	r20
 cf2:	f7 94       	ror	r15
 cf4:	e7 94       	ror	r14
 cf6:	1a 95       	dec	r17
 cf8:	c1 f7       	brne	.-16     	; 0xcea <__ftoa_engine+0xe6>
 cfa:	e6 e2       	ldi	r30, 0x26	; 38
 cfc:	f0 e0       	ldi	r31, 0x00	; 0
 cfe:	68 94       	set
 d00:	15 90       	lpm	r1, Z+
 d02:	15 91       	lpm	r17, Z+
 d04:	35 91       	lpm	r19, Z+
 d06:	65 91       	lpm	r22, Z+
 d08:	95 91       	lpm	r25, Z+
 d0a:	05 90       	lpm	r0, Z+
 d0c:	7f e2       	ldi	r23, 0x2F	; 47
 d0e:	73 95       	inc	r23
 d10:	e1 18       	sub	r14, r1
 d12:	f1 0a       	sbc	r15, r17
 d14:	43 0b       	sbc	r20, r19
 d16:	56 0b       	sbc	r21, r22
 d18:	c9 0b       	sbc	r28, r25
 d1a:	d0 09       	sbc	r29, r0
 d1c:	c0 f7       	brcc	.-16     	; 0xd0e <__ftoa_engine+0x10a>
 d1e:	e1 0c       	add	r14, r1
 d20:	f1 1e       	adc	r15, r17
 d22:	43 1f       	adc	r20, r19
 d24:	56 1f       	adc	r21, r22
 d26:	c9 1f       	adc	r28, r25
 d28:	d0 1d       	adc	r29, r0
 d2a:	7e f4       	brtc	.+30     	; 0xd4a <__ftoa_engine+0x146>
 d2c:	70 33       	cpi	r23, 0x30	; 48
 d2e:	11 f4       	brne	.+4      	; 0xd34 <__ftoa_engine+0x130>
 d30:	8a 95       	dec	r24
 d32:	e6 cf       	rjmp	.-52     	; 0xd00 <__ftoa_engine+0xfc>
 d34:	e8 94       	clt
 d36:	01 50       	subi	r16, 0x01	; 1
 d38:	30 f0       	brcs	.+12     	; 0xd46 <__ftoa_engine+0x142>
 d3a:	08 0f       	add	r16, r24
 d3c:	0a f4       	brpl	.+2      	; 0xd40 <__ftoa_engine+0x13c>
 d3e:	00 27       	eor	r16, r16
 d40:	02 17       	cp	r16, r18
 d42:	08 f4       	brcc	.+2      	; 0xd46 <__ftoa_engine+0x142>
 d44:	20 2f       	mov	r18, r16
 d46:	23 95       	inc	r18
 d48:	02 2f       	mov	r16, r18
 d4a:	7a 33       	cpi	r23, 0x3A	; 58
 d4c:	28 f0       	brcs	.+10     	; 0xd58 <__ftoa_engine+0x154>
 d4e:	79 e3       	ldi	r23, 0x39	; 57
 d50:	7d 93       	st	X+, r23
 d52:	2a 95       	dec	r18
 d54:	e9 f7       	brne	.-6      	; 0xd50 <__ftoa_engine+0x14c>
 d56:	10 c0       	rjmp	.+32     	; 0xd78 <__ftoa_engine+0x174>
 d58:	7d 93       	st	X+, r23
 d5a:	2a 95       	dec	r18
 d5c:	89 f6       	brne	.-94     	; 0xd00 <__ftoa_engine+0xfc>
 d5e:	06 94       	lsr	r0
 d60:	97 95       	ror	r25
 d62:	67 95       	ror	r22
 d64:	37 95       	ror	r19
 d66:	17 95       	ror	r17
 d68:	17 94       	ror	r1
 d6a:	e1 18       	sub	r14, r1
 d6c:	f1 0a       	sbc	r15, r17
 d6e:	43 0b       	sbc	r20, r19
 d70:	56 0b       	sbc	r21, r22
 d72:	c9 0b       	sbc	r28, r25
 d74:	d0 09       	sbc	r29, r0
 d76:	98 f0       	brcs	.+38     	; 0xd9e <__ftoa_engine+0x19a>
 d78:	23 95       	inc	r18
 d7a:	7e 91       	ld	r23, -X
 d7c:	73 95       	inc	r23
 d7e:	7a 33       	cpi	r23, 0x3A	; 58
 d80:	08 f0       	brcs	.+2      	; 0xd84 <__ftoa_engine+0x180>
 d82:	70 e3       	ldi	r23, 0x30	; 48
 d84:	7c 93       	st	X, r23
 d86:	20 13       	cpse	r18, r16
 d88:	b8 f7       	brcc	.-18     	; 0xd78 <__ftoa_engine+0x174>
 d8a:	7e 91       	ld	r23, -X
 d8c:	70 61       	ori	r23, 0x10	; 16
 d8e:	7d 93       	st	X+, r23
 d90:	30 f0       	brcs	.+12     	; 0xd9e <__ftoa_engine+0x19a>
 d92:	83 95       	inc	r24
 d94:	71 e3       	ldi	r23, 0x31	; 49
 d96:	7d 93       	st	X+, r23
 d98:	70 e3       	ldi	r23, 0x30	; 48
 d9a:	2a 95       	dec	r18
 d9c:	e1 f7       	brne	.-8      	; 0xd96 <__ftoa_engine+0x192>
 d9e:	11 24       	eor	r1, r1
 da0:	ef 90       	pop	r14
 da2:	ff 90       	pop	r15
 da4:	0f 91       	pop	r16
 da6:	1f 91       	pop	r17
 da8:	cf 91       	pop	r28
 daa:	df 91       	pop	r29
 dac:	99 27       	eor	r25, r25
 dae:	87 fd       	sbrc	r24, 7
 db0:	90 95       	com	r25
 db2:	08 95       	ret

00000db4 <strrev>:
 db4:	dc 01       	movw	r26, r24
 db6:	fc 01       	movw	r30, r24
 db8:	67 2f       	mov	r22, r23
 dba:	71 91       	ld	r23, Z+
 dbc:	77 23       	and	r23, r23
 dbe:	e1 f7       	brne	.-8      	; 0xdb8 <strrev+0x4>
 dc0:	32 97       	sbiw	r30, 0x02	; 2
 dc2:	04 c0       	rjmp	.+8      	; 0xdcc <strrev+0x18>
 dc4:	7c 91       	ld	r23, X
 dc6:	6d 93       	st	X+, r22
 dc8:	70 83       	st	Z, r23
 dca:	62 91       	ld	r22, -Z
 dcc:	ae 17       	cp	r26, r30
 dce:	bf 07       	cpc	r27, r31
 dd0:	c8 f3       	brcs	.-14     	; 0xdc4 <strrev+0x10>
 dd2:	08 95       	ret

00000dd4 <_exit>:
 dd4:	f8 94       	cli

00000dd6 <__stop_program>:
 dd6:	ff cf       	rjmp	.-2      	; 0xdd6 <__stop_program>
